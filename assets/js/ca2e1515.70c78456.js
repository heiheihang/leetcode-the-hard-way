"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[5456],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return c}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(n),c=a,h=d["".concat(p,".").concat(c)]||d[c]||m[c]||o;return n?r.createElement(h,l(l({ref:t},s),{},{components:n})):r.createElement(h,l({ref:t},s))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},57835:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return m}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],i={description:"Author: @heiheihang | https://leetcode.com/problems/maximum-depth-of-n-ary-tree/"},p="0559 - Maximum Depth of N-ary Tree (Easy)",u={unversionedId:"0500-0599/maximum-depth-of-n-ary-tree-easy",id:"0500-0599/maximum-depth-of-n-ary-tree-easy",title:"0559 - Maximum Depth of N-ary Tree (Easy)",description:"Author: @heiheihang | https://leetcode.com/problems/maximum-depth-of-n-ary-tree/",source:"@site/solutions/0500-0599/0559-maximum-depth-of-n-ary-tree-easy.md",sourceDirName:"0500-0599",slug:"/0500-0599/maximum-depth-of-n-ary-tree-easy",permalink:"/leetcode-the-hard-way/solutions/0500-0599/maximum-depth-of-n-ary-tree-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0500-0599/0559-maximum-depth-of-n-ary-tree-easy.md",tags:[],version:"current",sidebarPosition:559,frontMatter:{description:"Author: @heiheihang | https://leetcode.com/problems/maximum-depth-of-n-ary-tree/"},sidebar:"tutorialSidebar",previous:{title:"0532 - K-diff Pairs in an Array (Medium)",permalink:"/leetcode-the-hard-way/solutions/0500-0599/k-diff-pairs-in-an-array-medium"},next:{title:"0560 - Subarray Sum Equals K (Medium)",permalink:"/leetcode-the-hard-way/solutions/0500-0599/subarray-sum-equals-k-medium"}},s={},m=[{value:"Statement",id:"statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],d={toc:m};function c(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"0559---maximum-depth-of-n-ary-tree-easy"},"0559 - Maximum Depth of N-ary Tree (Easy)"),(0,o.kt)("h2",{id:"statement"},"Statement"),(0,o.kt)("p",null,"Given a n-ary tree, find its maximum depth."),(0,o.kt)("p",null,"The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [1,null,3,2,4,null,5,6]\nOutput: 3\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png",alt:null})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: 5\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The total number of nodes is in the range ",(0,o.kt)("inlineCode",{parentName:"li"},"[0, 10^4]"),"."),(0,o.kt)("li",{parentName:"ul"},"The depth of the n-ary tree is less than or equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"1000"),".")),(0,o.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,o.kt)("p",null,"We should use the DFS template from ",(0,o.kt)("a",{parentName:"p",href:"../../tutorials/graph-theory/depth-first-search"},"DFS Guide"),". Instead of looking at the left and right child, we look at all children in an ",(0,o.kt)("em",{parentName:"p"},"n-ary tree.")," We find the deepest child and set it to the current ",(0,o.kt)("inlineCode",{parentName:"p"},"largestDepth"),", then we add one for counting the depth of the current level."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note: A ",(0,o.kt)("strong",{parentName:"em"},"binary tree")," means each node at most has ",(0,o.kt)("strong",{parentName:"em"},"2 children")," (binary means 2). An ",(0,o.kt)("strong",{parentName:"em"},"n-ary")," tree means each node at most has ",(0,o.kt)("strong",{parentName:"em"},"n children"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def maxDepth(self, root: 'Node') -> int:\n        \n        def dfs(node):\n            #there is a possibility the root is None\n            if(node is None):\n                return 0\n                \n            #initialize the largest depth\n            largestDepth = 0\n            \n            #iterate each child, and update the largest depth if appropriate\n            for child in node.children:\n                largestDepth = max(largestDepth, dfs(child))\n            \n            #don't forget to add the current level height!    \n            return largestDepth + 1\n        \n        #we start iterating from the root\n        return dfs(root)\n")))}c.isMDXComponent=!0}}]);
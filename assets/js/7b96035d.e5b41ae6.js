"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[8791],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=i,f=c["".concat(l,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},54783:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},l="0034 - Find First and Last Position of Element in Sorted Array (Medium)",u={unversionedId:"0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",id:"0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",title:"0034 - Find First and Last Position of Element in Sorted Array (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/",source:"@site/solutions/0000-0099/0034-find-first-and-last-position-of-element-in-sorted-array-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",permalink:"/leetcode-the-hard-way/solutions/0000-0099/find-first-and-last-position-of-element-in-sorted-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0000-0099/0034-find-first-and-last-position-of-element-in-sorted-array-medium.md",tags:[],version:"current",sidebarPosition:34,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"},sidebar:"tutorialSidebar",previous:{title:"0028 - Implement strStr() (Easy)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/implement-strstr-easy"},next:{title:"0035 - Search Insert Position (Easy)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/search-insert-position-easy"}},p={},m=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],c={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0034---find-first-and-last-position-of-element-in-sorted-array-medium"},"0034 - Find First and Last Position of Element in Sorted Array (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an array of integers ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," sorted in non-decreasing order, find the starting and ending position of a given ",(0,a.kt)("inlineCode",{parentName:"p"},"target")," value."),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"target")," is not found in the array, return ",(0,a.kt)("inlineCode",{parentName:"p"},"[-1, -1]"),"."),(0,a.kt)("p",null,"You must write an algorithm with ",(0,a.kt)("inlineCode",{parentName:"p"},"O(log n)")," runtime complexity."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [], target = 0\nOutput: [-1,-1]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= nums.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-109 <= nums[i] <= 10^9")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"nums")," is a non-decreasing array."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-109 <= target <= 10^9"))),(0,a.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,a.kt)("p",null,"Prerequisite: ",(0,a.kt)("a",{parentName:"p",href:"../../tutorials/basic-topics/binary-search"},"Binary Search")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int getFirstPosition(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n - 1;\n        while (l < r) {\n            int m = l + (r - l) / 2;\n            if (target > nums[m]) l = m + 1;\n            else r = m;\n        }\n        return nums[l] == target ? l : -1;\n    }\n    \n    int getLastPosition(vector<int>& nums, int target) {\n        int n = nums.size(), l = 0, r = n - 1;\n        while (l < r) {\n            int m = l + (r - l + 1) / 2;\n            if (target < nums[m]) r = m - 1;\n            else l = m;\n        }\n        return nums[l] == target ? l : -1;\n    }\n    \n    vector<int> searchRange(vector<int>& nums, int target) {\n        int n = nums.size();\n        // handle edge case\n        vector<int> ans = {-1, -1};\n        if (n == 0) return ans;\n        // return the lower bound and upper bound - 1\n        return vector<int> {\n            // if the first position is -1, we can return ans directly\n            getFirstPosition(nums, target), \n            getLastPosition(nums, target)\n        };\n    }\n};\n")))}d.isMDXComponent=!0}}]);
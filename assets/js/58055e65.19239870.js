"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[7569],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=i,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(h,a(a({ref:n},p),{},{components:t})):r.createElement(h,a({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},61950:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=t(87462),i=t(63366),o=(t(67294),t(3905)),a=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/minimum-lines-to-represent-a-line-chart"},l="2280 - Minimum Lines to Represent a Line Chart (Medium)",c={unversionedId:"2200-2299/minimum-lines-to-represent-a-line-chart-medium",id:"2200-2299/minimum-lines-to-represent-a-line-chart-medium",title:"2280 - Minimum Lines to Represent a Line Chart (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/minimum-lines-to-represent-a-line-chart",source:"@site/solutions/2200-2299/2280-minimum-lines-to-represent-a-line-chart-medium.md",sourceDirName:"2200-2299",slug:"/2200-2299/minimum-lines-to-represent-a-line-chart-medium",permalink:"/leetcode-the-hard-way/solutions/2200-2299/minimum-lines-to-represent-a-line-chart-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/2200-2299/2280-minimum-lines-to-represent-a-line-chart-medium.md",tags:[],version:"current",sidebarPosition:2280,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimum-lines-to-represent-a-line-chart"},sidebar:"tutorialSidebar",previous:{title:"2279 - Maximum Bags With Full Capacity of Rocks (Medium)",permalink:"/leetcode-the-hard-way/solutions/2200-2299/maximum-bags-with-full-capacity-of-rock-medium"}},p={},u=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Greedy",id:"approach-1-greedy",level:2}],m={toc:u};function d(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2280---minimum-lines-to-represent-a-line-chart-medium"},"2280 - Minimum Lines to Represent a Line Chart (Medium)"),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"You are given a 2D integer array stockPrices where stockPrices","[i]"," = ","[dayi, pricei]"," indicates the price of the stock on day dayi is pricei. A line chart is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below:"),(0,o.kt)("p",null,"Return the minimum number of lines needed to represent the line chart."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]\nOutput: 3\nExplanation:\nThe diagram above represents the input, with the X-axis representing the day and Y-axis representing the price.\nThe following 3 lines can be drawn to represent the line chart:\n- Line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4).\n- Line 2 (in blue) from (4,4) to (5,4).\n- Line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1).\nIt can be shown that it is not possible to represent the line chart using less than 3 lines.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: stockPrices = [[3,4],[1,2],[7,8],[2,3]]\nOutput: 1\nExplanation:\nAs shown in the diagram above, the line chart can be represented with a single line.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"1 <= stockPrices.length <= 10^5"),(0,o.kt)("li",{parentName:"ul"},"stockPrices","[i]",".length == 2"),(0,o.kt)("li",{parentName:"ul"},"1 <= day_i, price_i <= 10^9"),(0,o.kt)("li",{parentName:"ul"},"All day_i are distinct.")),(0,o.kt)("h2",{id:"approach-1-greedy"},"Approach 1: Greedy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int minimumLines(vector<vector<int>>& stockPrices) {\n        int n = stockPrices.size();\n        // one point = no line\n        if (n == 1) return 0;\n        // > 1 point means at least one line\n        long long ans = 1;\n        // sort it first as it doesn't mention it's sorted\n        // and we want to compare adjacent points\n        sort(stockPrices.begin(), stockPrices.end());\n        // slope = (y1 - y0) / (x1 - x0)\n        // a line is needed when the slope is different\n        // to check if the slope is same \n        // use integer multiplcation instead of float dvision to avoid precision problem\n        // hence, \n        // slope1 = (y1 - y0) / (x1 - x0)\n        // slope2 = (y2 - y1) / (x2 - x1)\n        // slope1 = slope2 \n        // (y1 - y0) / (x1 - x0) = (y2 - y1) / (x2 - x1)\n        // (y1 - y0) * (x2 - x1) = (y2 - y1) * (x1 - x0)\n\n        // the slope for the first line\n        long long prev_x = (stockPrices[1][0] - stockPrices[0][0]);\n        long long prev_y = (stockPrices[1][1] - stockPrices[0][1]);\n        for (int i = 1; i < n; i++) {\n            long long cur_x = (stockPrices[i][0] - stockPrices[i - 1][0]);\n            long long cur_y = (stockPrices[i][1] - stockPrices[i - 1][1]);\n            // different slope -> need a new line\n            if (cur_x * prev_y != cur_y * prev_x) {\n                ans += 1;\n            }\n            // update prev_x & prev_y\n            prev_x = cur_x;\n            prev_y = cur_y;\n        }\n        return ans;\n    }\n};\n")))}d.isMDXComponent=!0}}]);
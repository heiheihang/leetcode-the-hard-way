"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[2221],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return c}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return n?o.createElement(h,a(a({ref:t},l),{},{components:n})):o.createElement(h,a({ref:t},l))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:r,a[1]=d;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},52119:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var o=n(87462),r=n(63366),i=(n(67294),n(3905)),a=n(8539),d=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/find-closest-node-to-given-two-nodes"},p="2359 - Find Closest Node to Given Two Nodes (Medium)",l={unversionedId:"2300-2399/find-closest-node-to-given-two-nodes-medium",id:"2300-2399/find-closest-node-to-given-two-nodes-medium",title:"2359 - Find Closest Node to Given Two Nodes (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/find-closest-node-to-given-two-nodes",source:"@site/solutions/2300-2399/2359-find-closest-node-to-given-two-nodes-medium.md",sourceDirName:"2300-2399",slug:"/2300-2399/find-closest-node-to-given-two-nodes-medium",permalink:"/leetcode-the-hard-way/solutions/2300-2399/find-closest-node-to-given-two-nodes-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/2300-2399/2359-find-closest-node-to-given-two-nodes-medium.md",tags:[],version:"current",sidebarPosition:2359,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/find-closest-node-to-given-two-nodes"},sidebar:"tutorialSidebar",previous:{title:"2358 - Maximum Number of Groups Entering a Competition (Medium)",permalink:"/leetcode-the-hard-way/solutions/2300-2399/maximum-number-of-groups-entering-a-competition-medium"},next:{title:"2360 - Longest Cycle in a Graph (Hard)",permalink:"/leetcode-the-hard-way/solutions/2300-2399/longest-cycle-in-a-graph-hard"}},m={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach: Dijkstra x 2",id:"approach-dijkstra-x-2",level:2}],c={toc:u};function h(e){var t=e.components,n=(0,r.Z)(e,d);return(0,i.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2359---find-closest-node-to-given-two-nodes-medium"},"2359 - Find Closest Node to Given Two Nodes (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/find-closest-node-to-given-two-nodes"},"https://leetcode.com/problems/find-closest-node-to-given-two-nodes")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given a ",(0,i.kt)("strong",{parentName:"p"},"directed")," graph of ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," nodes numbered from ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"n - 1"),", where each node has ",(0,i.kt)("strong",{parentName:"p"},"at most one")," outgoing edge."),(0,i.kt)("p",null,"The graph is represented with a given ",(0,i.kt)("strong",{parentName:"p"},"0-indexed")," array ",(0,i.kt)("inlineCode",{parentName:"p"},"edges")," of size ",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", indicating that there is a directed edge from node ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," to node ",(0,i.kt)("inlineCode",{parentName:"p"},"edges[i]"),". If there is no outgoing edge from ",(0,i.kt)("inlineCode",{parentName:"p"},"i"),", then ",(0,i.kt)("inlineCode",{parentName:"p"},"edges[i] == -1"),"."),(0,i.kt)("p",null,"You are also given two integers ",(0,i.kt)("inlineCode",{parentName:"p"},"node1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"node2"),"."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the ",(0,i.kt)("strong",{parentName:"em"},"index")," of the node that can be reached from both")," ",(0,i.kt)("inlineCode",{parentName:"p"},"node1")," ",(0,i.kt)("em",{parentName:"p"},"and")," ",(0,i.kt)("inlineCode",{parentName:"p"},"node2"),(0,i.kt)("em",{parentName:"p"},", such that the ",(0,i.kt)("strong",{parentName:"em"},"maximum")," between the distance from")," ",(0,i.kt)("inlineCode",{parentName:"p"},"node1")," ",(0,i.kt)("em",{parentName:"p"},"to that node, and from")," ",(0,i.kt)("inlineCode",{parentName:"p"},"node2")," ",(0,i.kt)("em",{parentName:"p"},"to that node is ",(0,i.kt)("strong",{parentName:"em"},"minimized")),". If there are multiple answers, return the node with the ",(0,i.kt)("strong",{parentName:"p"},"smallest")," index, and if no possible answer exists, return ",(0,i.kt)("inlineCode",{parentName:"p"},"-1"),"."),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"edges")," may contain cycles."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-2.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: edges = [2,2,3,-1], node1 = 0, node2 = 1\nOutput: 2\nExplanation: The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1.\nThe maximum of those two distances is 1. It can be proven that we cannot get a node with a smaller maximum distance than 1, so we return node 2.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-4.png",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: edges = [1,2,-1], node1 = 0, node2 = 2\nOutput: 2\nExplanation: The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0.\nThe maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller maximum distance than 2, so we return node 2.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"n == edges.length")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"2 <= n <= 10^5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-1 <= edges[i] < n")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"edges[i] != i")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= node1, node2 < n"))),(0,i.kt)("h2",{id:"approach-dijkstra-x-2"},"Approach: Dijkstra x 2"),(0,i.kt)("p",null,"We can use dijkstra algorithm to compute the shortest paths starting from ",(0,i.kt)("inlineCode",{parentName:"p"},"node1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"node2")," to other nodes, then check for the one with the minimum max distance."),(0,i.kt)(a.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    template<typename T_pair, typename T_vector>\n    void dijkstra(T_pair &g, T_vector &dist, int start) {\n      priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n      dist[start] = 0;\n      pq.push({start, 0});\n      while (!pq.empty()) {\n        auto [u_node, u_cost] = pq.top(); pq.pop();\n        if (u_cost > dist[u_node]) continue;\n        for (auto [v_node, v_cost] : g[u_node]) {\n          if (dist[v_node] > dist[u_node] + v_cost) {\n            dist[v_node] = dist[u_node] + v_cost;\n            pq.push({v_node, dist[v_node]});\n          }\n        }\n      }\n    }\n    \n    int closestMeetingNode(vector<int>& edges, int node1, int node2) {\n        int n = edges.size();\n        vector<int> d1(n, INT_MAX), d2(n, INT_MAX);\n        vector<vector<pair<int, int>>> g(n);\n        for (int i = 0; i < n; i++) if (edges[i] != -1) g[i].push_back({edges[i], 1});\n        dijkstra(g, d1, node1);\n        dijkstra(g, d2, node2);\n        int ans = -1, mi = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            if (max(d1[i], d2[i]) < mi) {\n                mi = max(d1[i], d2[i]);\n                ans = i;\n            }\n        }\n        return mi == INT_MAX ? -1 : ans;\n    }\n};\n")))}h.isMDXComponent=!0},8539:function(e,t,n){n.d(t,{Z:function(){return r}});var o=n(67294);function r(e){var t=e.name;return o.createElement("div",{className:"solution-author-wrapper"},o.createElement("span",null,"This solution is written by ",t))}}}]);
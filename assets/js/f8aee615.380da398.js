"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[3403],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(g,i(i({ref:n},s),{},{components:t})):r.createElement(g,i({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},10468:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return d}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=t(8539),l=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/longest-cycle-in-a-graph"},c="2360 - Longest Cycle in a Graph (Hard)",s={unversionedId:"2300-2399/longest-cycle-in-a-graph-hard",id:"2300-2399/longest-cycle-in-a-graph-hard",title:"2360 - Longest Cycle in a Graph (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/longest-cycle-in-a-graph",source:"@site/solutions/2300-2399/2360-longest-cycle-in-a-graph-hard.md",sourceDirName:"2300-2399",slug:"/2300-2399/longest-cycle-in-a-graph-hard",permalink:"/leetcode-the-hard-way/solutions/2300-2399/longest-cycle-in-a-graph-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/2300-2399/2360-longest-cycle-in-a-graph-hard.md",tags:[],version:"current",sidebarPosition:2360,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/longest-cycle-in-a-graph"},sidebar:"tutorialSidebar",previous:{title:"2359 - Find Closest Node to Given Two Nodes (Medium)",permalink:"/leetcode-the-hard-way/solutions/2300-2399/find-closest-node-to-given-two-nodes-medium"}},u={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach: Strongly Connected Component",id:"approach-strongly-connected-component",level:2}],m={toc:d};function g(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2360---longest-cycle-in-a-graph-hard"},"2360 - Longest Cycle in a Graph (Hard)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-cycle-in-a-graph"},"https://leetcode.com/problems/longest-cycle-in-a-graph")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a ",(0,a.kt)("strong",{parentName:"p"},"directed")," graph of ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," nodes numbered from ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"n - 1"),", where each node has ",(0,a.kt)("strong",{parentName:"p"},"at most one")," outgoing edge."),(0,a.kt)("p",null,"The graph is represented with a given ",(0,a.kt)("strong",{parentName:"p"},"0-indexed")," array ",(0,a.kt)("inlineCode",{parentName:"p"},"edges")," of size ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),", indicating that there is a directed edge from node ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," to node ",(0,a.kt)("inlineCode",{parentName:"p"},"edges[i]"),". If there is no outgoing edge from node ",(0,a.kt)("inlineCode",{parentName:"p"},"i"),", then ",(0,a.kt)("inlineCode",{parentName:"p"},"edges[i] == -1"),"."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the length of the ",(0,a.kt)("strong",{parentName:"em"},"longest")," cycle in the graph"),". If no cycle exists, return ",(0,a.kt)("inlineCode",{parentName:"p"},"-1"),"."),(0,a.kt)("p",null,"A cycle is a path that starts and ends at the ",(0,a.kt)("strong",{parentName:"p"},"same")," node."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/06/08/graph4drawio-5.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: edges = [3,3,4,2,3]\nOutput: 3\nExplanation: The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2.\nThe length of this cycle is 3, so 3 is returned.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-1.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: edges = [2,-1,3,1]\nOutput: -1\nExplanation: There are no cycles in this graph.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"n == edges.length")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"2 <= n <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-1 <= edges[i] < n")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"edges[i] != i"))),(0,a.kt)("h2",{id:"approach-strongly-connected-component"},"Approach: Strongly Connected Component"),(0,a.kt)("p",null,"We can compute Strongly Connected Component on the graph and find the maximum one. "),(0,a.kt)(i.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    struct SCC : vector<int> {\n      vector<vector<int>> comps;\n      vector<int> S;\n\n      SCC() {}\n      SCC(vector<vector<int>>& G) : vector<int>((int)G.size(), -1), S((int)G.size()) {\n        for(int i = 0; i < (int)G.size(); i++) if(!S[i]) dfs(G, i);\n      }\n\n      int dfs(vector<vector<int>>& G, int v) {\n        int low = S[v] = (int)S.size();\n        S.push_back(v);\n        for(auto e : G[v]) if(at(e) < 0) low = min(low, S[e] ?: dfs(G, e));\n        if(low == S[v]) {\n          comps.push_back({});\n          for(int i = S[v]; i < (int)S.size(); i++) {\n            at(S[i]) = (int)comps.size() - 1;\n            comps.back().push_back(S[i]);\n          }\n          S.resize(S[v]);\n        }\n        return low;\n      }\n    };\n    \n    int longestCycle(vector<int>& edges) {\n        int n = edges.size(), ans = -1;\n        vector<vector<int>> g(n);\n        // we only need those nodes with outgoing edge\n        for (int i = 0; i < n; i++) if (edges[i] != -1) g[i].push_back(edges[i]);\n        // compute strongly connected components\n        SCC s = SCC(g);\n        // if the size is greater than 1, that means there is a cycle (which has at least two nodes)\n        // so iterate each possible answer and find the max one\n        for (auto &x : s.comps) if ((int) x.size() > 1) ans = max(ans, (int) x.size());\n        return ans;\n    }\n};\n")))}g.isMDXComponent=!0},8539:function(e,n,t){t.d(n,{Z:function(){return o}});var r=t(67294);function o(e){var n=e.name;return r.createElement("div",{className:"solution-author-wrapper"},r.createElement("span",null,"This solution is written by ",n))}}}]);
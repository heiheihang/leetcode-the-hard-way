"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[3105],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=p(n),d=o,f=s["".concat(u,".").concat(d)]||s[d]||c[d]||a;return n?r.createElement(f,i(i({ref:t},m),{},{components:n})):r.createElement(f,i({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=s;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},87078:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/"},u="1155 - Number of Dice Rolls With Target Sum (Medium)",p={unversionedId:"1100-1199/number-of-dice-rolls-with-target-sum-medium",id:"1100-1199/number-of-dice-rolls-with-target-sum-medium",title:"1155 - Number of Dice Rolls With Target Sum (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/",source:"@site/solutions/1100-1199/1155-number-of-dice-rolls-with-target-sum-medium.md",sourceDirName:"1100-1199",slug:"/1100-1199/number-of-dice-rolls-with-target-sum-medium",permalink:"/leetcode-the-hard-way/solutions/1100-1199/number-of-dice-rolls-with-target-sum-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/1100-1199/1155-number-of-dice-rolls-with-target-sum-medium.md",tags:[],version:"current",sidebarPosition:1155,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/"},sidebar:"tutorialSidebar",previous:{title:"1147 - Longest Chunked Palindrome Decomposition (Hard)",permalink:"/leetcode-the-hard-way/solutions/1100-1199/longest-chunked-palindrome-decomposition-hard"},next:{title:"1162 -  As Far from Land as Possible (Medium)",permalink:"/leetcode-the-hard-way/solutions/1100-1199/as-far-from-land-as-possible-medium"}},m={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],s={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1155---number-of-dice-rolls-with-target-sum-medium"},"1155 - Number of Dice Rolls With Target Sum (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You have ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," dice and each die has ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," faces numbered from ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,a.kt)("p",null,"Given three integers ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),", return ",(0,a.kt)("em",{parentName:"p"},"the number of possible ways (out of the")," ",(0,a.kt)("inlineCode",{parentName:"p"},"kn")," ",(0,a.kt)("em",{parentName:"p"},"total ways) to roll the dice so the sum of the face-up numbers equals")," ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),". Since the answer may be too large, return it ",(0,a.kt)("strong",{parentName:"p"},"modulo")," ",(0,a.kt)("inlineCode",{parentName:"p"},"109 + 7"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 1, k = 6, target = 3\nOutput: 1\nExplanation: You throw one die with 6 faces.\nThere is only one way to get a sum of 3.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 2, k = 6, target = 7\nOutput: 6\nExplanation: You throw two dice, each with 6 faces.\nThere are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 30, k = 30, target = 500\nOutput: 222616187\nExplanation: The answer must be returned modulo 109 + 7.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n, k <= 30")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= target <= 1000"))),(0,a.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int numRollsToTarget(int n, int k, int target) {\n        int M = 1e9 + 7;\n        // dp[i][j]: number of ways to reach target j using i dice\n        vector<vector<int>> dp(n + 1, vector<int>(target + 1));\n        // there is 1 way to reach 0 using 0 dice\n        dp[0][0] = 1;\n        // iterate each dice\n        for (int i = 1; i <= n; i++) {\n            // iterate each target\n            for (int j = 1; j <= target; j++) {\n                // iterate each face\n                for (int f = 1; f <= k; f++) {\n                    // we can use this f only if we add it\n                    // the sum won't exceed target\n                    if (j - f >= 0) {\n                        (dp[i][j] += dp[i - 1][j - f]) %= M;\n                    }\n                }\n            }\n        }\n        return dp[n][target];\n    }\n};\n")))}d.isMDXComponent=!0}}]);
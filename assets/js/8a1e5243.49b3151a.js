"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[8972],{3905:function(n,t,e){e.d(t,{Zo:function(){return l},kt:function(){return f}});var r=e(67294);function o(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function i(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?i(Object(e),!0).forEach((function(t){o(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function u(n,t){if(null==n)return{};var e,r,o=function(n,t){if(null==n)return{};var e,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)e=i[r],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)e=i[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}var c=r.createContext({}),s=function(n){var t=r.useContext(c),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},l=function(n){var t=s(n.components);return r.createElement(c.Provider,{value:t},n.children)},p={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(n,t){var e=n.components,o=n.mdxType,i=n.originalType,c=n.parentName,l=u(n,["components","mdxType","originalType","parentName"]),d=s(e),f=o,y=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return e?r.createElement(y,a(a({ref:t},l),{},{components:e})):r.createElement(y,a({ref:t},l))}));function f(n,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof n||o){var i=e.length,a=new Array(i);a[0]=d;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=n,u.mdxType="string"==typeof n?n:o,a[1]=u;for(var s=2;s<i;s++)a[s]=e[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},48441:function(n,t,e){e.r(t),e.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return p}});var r=e(87462),o=e(63366),i=(e(67294),e(3905)),a=["components"],u={title:"Disjoint Set Union (DSU)",description:"Disjoint Set Union is a data structure that allows us to combine any two sets into one.",hide_table_of_contents:!1,keywords:["leetcode","template","disjoint set union","dsu","algorithm"]},c=void 0,s={unversionedId:"dsu",id:"dsu",title:"Disjoint Set Union (DSU)",description:"Disjoint Set Union is a data structure that allows us to combine any two sets into one.",source:"@site/templates/dsu.md",sourceDirName:".",slug:"/dsu",permalink:"/leetcode-the-hard-way/templates/dsu",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/templates/dsu.md",tags:[],version:"current",frontMatter:{title:"Disjoint Set Union (DSU)",description:"Disjoint Set Union is a data structure that allows us to combine any two sets into one.",hide_table_of_contents:!1,keywords:["leetcode","template","disjoint set union","dsu","algorithm"]},sidebar:"tutorialSidebar",previous:{title:"Bit Manipulation",permalink:"/leetcode-the-hard-way/templates/bit-manipulation"}},l={},p=[],d={toc:p};function f(n){var t=n.components,e=(0,o.Z)(n,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class dsu {\n public:\n  vector<int> root, rank;\n  int n;\n  int cnt;\n\n  dsu(int _n) : n(_n) {\n    root.resize(n);\n    rank.resize(n);\n    for(int i = 0; i < n; i++) {\n        root[i] = i;\n        rank[i] = 1;\n    }\n    cnt = n;\n  }\n\n  inline int getCount() { return cnt; }\n\n  inline int get(int x) { return (x == root[x] ? x : (root[x] = get(root[x]))); }\n\n  inline bool unite(int x, int y) {\n    x = get(x);\n    y = get(y);\n    if (x != y) {\n        if (rank[x] > rank[y]) {\n            root[y] = x;\n        } else if (rank[x] < rank[y]) {\n            root[x] = y;\n        } else {\n            root[y] = x;\n            rank[x] += 1;\n        }\n        cnt--;\n      return true;\n    }\n    return false;\n  }\n};\n\n\n// int main() {\n//  dsu d = dsu(n);\n//  d.unite(a, b);\n//  return 0;\n// }\n")))}f.isMDXComponent=!0}}]);
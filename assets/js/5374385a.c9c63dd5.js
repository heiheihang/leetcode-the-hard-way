"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[5834],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=r.createContext({}),c=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),m=c(n),f=o,g=m["".concat(s,".").concat(f)]||m[f]||p[f]||i;return n?r.createElement(g,a(a({ref:e},u),{},{components:n})):r.createElement(g,a({ref:e},u))}));function f(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5699:function(t,e,n){n.r(e),n.d(e,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={description:"Author: @wingkwong"},s="Booth's Algorithm",c={unversionedId:"strings/booths-algorithm",id:"strings/booths-algorithm",title:"Booth's Algorithm",description:"Author: @wingkwong",source:"@site/tutorials/strings/booths-algorithm.md",sourceDirName:"strings",slug:"/strings/booths-algorithm",permalink:"/leetcode-the-hard-way/tutorials/strings/booths-algorithm",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tutorials/strings/booths-algorithm.md",tags:[],version:"current",lastUpdatedBy:"Wing-Kam Wong",lastUpdatedAt:1652613881,formattedLastUpdatedAt:"5/15/2022",frontMatter:{description:"Author: @wingkwong"},sidebar:"tutorialSidebar",previous:{title:"String",permalink:"/leetcode-the-hard-way/tutorials/strings/"},next:{title:"Manacher's Algorithm",permalink:"/leetcode-the-hard-way/tutorials/strings/manachers-algorithm"}},u={},p=[{value:"<em>Tutorial: Coming Soon!</em>",id:"tutorial-coming-soon",level:4},{value:"Determine the lexicographically minimal rotation of a string",id:"determine-the-lexicographically-minimal-rotation-of-a-string",level:4},{value:"Example",id:"example",level:4}],m={toc:p};function f(t){var e=t.components,n=(0,o.Z)(t,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"booths-algorithm"},"Booth's Algorithm"),(0,i.kt)("h4",{id:"tutorial-coming-soon"},(0,i.kt)("em",{parentName:"h4"},"Tutorial: Coming Soon!")),(0,i.kt)("h4",{id:"determine-the-lexicographically-minimal-rotation-of-a-string"},"Determine the lexicographically minimal rotation of a string"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int booth_function(string s) {\n  s = s + s;\n  int n = SIZE(s);\n  // failure function\n  vi f(n, -1);\n  // least roation of string found so far\n  int k = 0;\n  FOR(j, 1, n) {\n    char sj = s[j];\n    int i = f[j - k - 1];\n    while (i != -1 && sj != s[k + i + 1]) {\n      if (sj < s[k + i + 1]) k = j - i - 1;\n      i = f[i];\n    }\n    if (sj != s[k + i + 1]) {\n      // i == -1\n      if (sj < s[k]) k = j;\n      f[j - k] = -1;\n    } else {\n      f[j - k] = i + 1;\n    }\n  }\n  return k;\n}\n")),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void solve() {\n  string s;\n  cin >> s;\n  int n = SIZE(s);\n  int k = booth_function(s);\n  s = s + s;\n  cout << s.substr(k, n) << endl;\n}\n")))}f.isMDXComponent=!0}}]);
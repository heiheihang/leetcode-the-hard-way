"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[2187],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,h=p["".concat(u,".").concat(m)]||p[m]||s[m]||l;return r?n.createElement(h,o(o({ref:t},d),{},{components:r})):n.createElement(h,o({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},88288:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return u},metadata:function(){return d},toc:function(){return p}});var n=r(87462),a=r(63366),l=(r(67294),r(3905)),o=r(78735),i=(r(11182),["components"]),u={title:"Binary Tree",description:"Binary Tree is a tree structure in which eacho node only contains at most two children",keywords:["leetcode","tutorial","binary tree","data structure"]},c=void 0,d={unversionedId:"graph-theory/binary-tree",id:"graph-theory/binary-tree",title:"Binary Tree",description:"Binary Tree is a tree structure in which eacho node only contains at most two children",source:"@site/tutorials/graph-theory/binary-tree.md",sourceDirName:"graph-theory",slug:"/graph-theory/binary-tree",permalink:"/leetcode-the-hard-way/tutorials/graph-theory/binary-tree",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tutorials/graph-theory/binary-tree.md",tags:[],version:"current",frontMatter:{title:"Binary Tree",description:"Binary Tree is a tree structure in which eacho node only contains at most two children",keywords:["leetcode","tutorial","binary tree","data structure"]},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/leetcode-the-hard-way/tutorials/graph-theory/introduction"},next:{title:"Breadth First Search (BFS)",permalink:"/leetcode-the-hard-way/tutorials/graph-theory/breadth-first-search"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Traversal",id:"traversal",level:2},{value:"Pre-order",id:"pre-order",level:3},{value:"In-order",id:"in-order",level:3},{value:"Post-order",id:"post-order",level:3},{value:"Summary",id:"summary",level:3}],m={toc:p};function h(e){var t=e.components,r=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(o.Z,{names:"@wingkwong",mdxType:"TutorialAuthors"}),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"Binary Tree is a tree structure in which eacho node only contains at most two children, often referred as left and right child."),(0,l.kt)("h2",{id:"traversal"},"Traversal"),(0,l.kt)("p",null,"There are different ways to traverse trees - In-order, Pre-order, and Post-order. Supposing we have a binary tree with 5 nodes,"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/35857179/180000691-7634f6e6-1c2b-4e6e-a52a-83f3218e2d6b.png",alt:"image"})),(0,l.kt)("h3",{id:"pre-order"},"Pre-order"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Visit the root"),(0,l.kt)("li",{parentName:"ul"},"Traverse the left sub-tree"),(0,l.kt)("li",{parentName:"ul"},"Traverse the right sub-tree")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void preorder(TreeNode* node) {\n    if (node == NULL) return;\n    s.push_back(node->val);\n    preorder(node->left);\n    preorder(node->right);\n}\n")),(0,l.kt)("h3",{id:"in-order"},"In-order"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Traverse the left sub-tree"),(0,l.kt)("li",{parentName:"ul"},"Visit the root"),(0,l.kt)("li",{parentName:"ul"},"Traverse the right sub-tree")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void inorder(TreeNode* node) {\n    if (node == NULL) return;\n    inorder(node->left);\n    s.push_back(node->val);\n    inorder(node->right);\n}\n")),(0,l.kt)("h3",{id:"post-order"},"Post-order"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Traverse the left sub-tree"),(0,l.kt)("li",{parentName:"ul"},"Traverse the right sub-tree"),(0,l.kt)("li",{parentName:"ul"},"Visit the root")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"void postorder(TreeNode* node) {\n    if (node == NULL) return;\n    postorder(node->left);\n    postorder(node->right);\n    s.push_back(node->val);\n}\n")),(0,l.kt)("h3",{id:"summary"},"Summary"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Traversal"),(0,l.kt)("th",{parentName:"tr",align:null},"Path"),(0,l.kt)("th",{parentName:"tr",align:null},"Order"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pre-order"),(0,l.kt)("td",{parentName:"tr",align:null},"1 -> 2 -> 4 -> 5 -> 3"),(0,l.kt)("td",{parentName:"tr",align:null},"Root -> Left -> Right")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"In-order"),(0,l.kt)("td",{parentName:"tr",align:null},"4 -> 2 -> 5 -> 1 -> 3"),(0,l.kt)("td",{parentName:"tr",align:null},"Left -> Root -> Right")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Post-order"),(0,l.kt)("td",{parentName:"tr",align:null},"4 -> 5 -> 2 -> 3 -> 1"),(0,l.kt)("td",{parentName:"tr",align:null},"Left -> Right -> Root")))))}h.isMDXComponent=!0},11182:function(e,t,r){r.d(t,{Z:function(){return l}});var n=r(67294);function a(e){var t=e.names;if(!t)return null;var r=t.split(",");return n.createElement("div",{className:"tag-wrapper"},r.map((function(e,t){return n.createElement("span",{key:t,className:"topic-tag"},e)})))}function l(e){var t=e.title,r=e.collectionLink,l=e.isSorted,o=void 0===l||l,i=e.data,u=i.some((function(e){return e.tags})),c={Easy:0,Medium:1,Hard:2},d=(o?i.sort((function(e,t){return c[e.difficulty]-c[t.difficulty]})):i).map((function(e,t){return n.createElement("tr",{key:t},n.createElement("td",null,n.createElement("a",{href:e.leetCodeLink,target:"_blank"},e.problemName)),n.createElement("td",null,e.difficulty),n.createElement("td",{style:{textAlign:"center"}},e.solutionLink&&n.createElement("a",{href:e.solutionLink,target:"_blank"},"View Solutions"),!e.solutionLink&&n.createElement("span",null,"N/A")),u&&n.createElement("td",null,n.createElement(a,{names:e.tags})))}));return n.createElement(n.Fragment,null,n.createElement("h3",null,t),r&&n.createElement("h4",null,"Start Practicing: ",n.createElement("a",{href:r,target:"_blank"},r)),n.createElement("table",null,n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,"Problem Name"),n.createElement("th",null,"Difficulty"),n.createElement("th",null,"Solution Link"),u&&n.createElement("th",null,"Topic"))),n.createElement("tbody",null,d)))}},78735:function(e,t,r){r.d(t,{Z:function(){return a}});var n=r(67294);function a(e){var t=e.names.split(",");return n.createElement("div",{className:"tutorial-author-wrapper"},"This tutorial is written by",t.map((function(e,t){return n.createElement("span",{key:t,className:"author-tag"},e)})))}}}]);
"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[1117],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),l=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,d=u["".concat(o,".").concat(h)]||u[h]||c[h]||i;return n?a.createElement(d,p(p({ref:t},m),{},{components:n})):a.createElement(d,p({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,p[1]=s;for(var l=2;l<i;l++)p[l]=n[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},31658:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),p=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/is-graph-bipartite"},o="0785 -  Is Graph Bipartite? (Medium)",l={unversionedId:"0700-0799/is-graph-bipartite-medium",id:"0700-0799/is-graph-bipartite-medium",title:"0785 -  Is Graph Bipartite? (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/is-graph-bipartite",source:"@site/solutions/0700-0799/0785-is-graph-bipartite-medium.md",sourceDirName:"0700-0799",slug:"/0700-0799/is-graph-bipartite-medium",permalink:"/leetcode-the-hard-way/solutions/0700-0799/is-graph-bipartite-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0700-0799/0785-is-graph-bipartite-medium.md",tags:[],version:"current",sidebarPosition:785,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/is-graph-bipartite"},sidebar:"tutorialSidebar",previous:{title:"0744 - Find Smallest Letter Greater Than Target (Easy)",permalink:"/leetcode-the-hard-way/solutions/0700-0799/find-smallest-letter-greater-than-target-easy"},next:{title:"0787 - Cheapest Flights Within K Stops (Medium)",permalink:"/leetcode-the-hard-way/solutions/0700-0799/cheapest-flights-within-k-stops-medium"}},m={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DSF Colouring",id:"approach-1-dsf-colouring",level:2},{value:"Approach 2: BFS Colouring",id:"approach-2-bfs-colouring",level:2},{value:"Approach 3: Custom Template",id:"approach-3-custom-template",level:2}],u={toc:c};function h(e){var t=e.components,n=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0785----is-graph-bipartite-medium"},"0785 -  Is Graph Bipartite? (Medium)"),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"There is an ",(0,i.kt)("strong",{parentName:"p"},"undirected")," graph with ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," nodes, where each node is numbered between ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"n - 1"),". You are given a 2D array ",(0,i.kt)("inlineCode",{parentName:"p"},"graph"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"graph[u]")," is an array of nodes that node ",(0,i.kt)("inlineCode",{parentName:"p"},"u")," is adjacent to. More formally, for each ",(0,i.kt)("inlineCode",{parentName:"p"},"v")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"graph[u]"),", there is an undirected edge between node ",(0,i.kt)("inlineCode",{parentName:"p"},"u")," and node ",(0,i.kt)("inlineCode",{parentName:"p"},"v"),". The graph has the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"There are no self-edges (",(0,i.kt)("inlineCode",{parentName:"li"},"graph[u]")," does not contain ",(0,i.kt)("inlineCode",{parentName:"li"},"u"),")."),(0,i.kt)("li",{parentName:"ul"},"There are no parallel edges (",(0,i.kt)("inlineCode",{parentName:"li"},"graph[u]")," does not contain duplicate values)."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"v")," is in ",(0,i.kt)("inlineCode",{parentName:"li"},"graph[u]"),", then ",(0,i.kt)("inlineCode",{parentName:"li"},"u")," is in ",(0,i.kt)("inlineCode",{parentName:"li"},"graph[v]")," (the graph is undirected)."),(0,i.kt)("li",{parentName:"ul"},"The graph may not be connected, meaning there may be two nodes ",(0,i.kt)("inlineCode",{parentName:"li"},"u")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"v")," such that there is no path between them.")),(0,i.kt)("p",null,"A graph is ",(0,i.kt)("strong",{parentName:"p"},"bipartite")," if the nodes can be partitioned into two independent sets ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," such that ",(0,i.kt)("strong",{parentName:"p"},"every")," edge in the graph connects a node in set ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," and a node in set ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),"."),(0,i.kt)("p",null,"Return ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," ",(0,i.kt)("em",{parentName:"p"},"if and only if it is ",(0,i.kt)("strong",{parentName:"em"},"bipartite")),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\nOutput: false\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: graph = [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"graph.length == n")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= n <= 100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= graph[u].length < n")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= graph[u][i] <= n - 1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"graph[u]")," does not contain ",(0,i.kt)("inlineCode",{parentName:"li"},"u"),"."),(0,i.kt)("li",{parentName:"ul"},"All the values of ",(0,i.kt)("inlineCode",{parentName:"li"},"graph[u]")," are ",(0,i.kt)("strong",{parentName:"li"},"unique"),"."),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"graph[u]")," contains ",(0,i.kt)("inlineCode",{parentName:"li"},"v"),", then ",(0,i.kt)("inlineCode",{parentName:"li"},"graph[v]")," contains ",(0,i.kt)("inlineCode",{parentName:"li"},"u"),".")),(0,i.kt)("h2",{id:"approach-1-dsf-colouring"},"Approach 1: DSF Colouring"),(0,i.kt)("p",null,"We can colour each set, says ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mn",{parentName:"mrow"},"0")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"0")))))," and ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mn",{parentName:"mrow"},"1")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"1"))))),". For example, in example 2, we can colour {0, 2} to ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mn",{parentName:"mrow"},"0")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"0")))))," and {1, 3} to ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mn",{parentName:"mrow"},"1")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"1"))))),". Therefore, we greedily colour them - if the current node is marked as ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mn",{parentName:"mrow"},"0")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"0"))))),", then all neighbours would be ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mn",{parentName:"mrow"},"1")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"1")))))," and so on."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isBipartite(vector<vector<int>>& graph) {\n        int n = graph.size();\n        // {-1, 0, 1}\n        // -1: uncoloured\n        // 0: red\n        // 1: blue\n        vector<int> vis(n, -1); \n        function<int(int,int)> dfs = [&](int u, int colour) -> int {\n            // check if it is coloured or not\n            if (vis[u] != -1) {\n                // if the colour is same as previous one -> return 1\n                if (vis[u] == (color ^ 1)) return 1;\n                // the colour is correct -> return 0 \n                else return 0;\n            }\n            // set the colour\n            vis[u] = colour;\n            // iterate each neighbours\n            for (auto& v : graph[u]) {\n                // the expected colour for neighbours would be colour ^ 1\n                // i.e. 0 -> 1 or 1 -> 0\n                if (dfs(v, colour ^ 1)) {\n                    return 1;\n                }\n            }\n            return 0;\n        };\n        // iterate each node\n        for (int i = 0; i < n; i++) {\n            // check if it is coloured\n            if (vis[i] == -1) {\n                // if not, then colour it\n                // set 0 by default\n                if (dfs(i, 0)) {\n                    // found neighbours also have the same colour\n                    // then return 0 \n                    return 0;\n                }\n            }\n        }\n        return 1;\n    }\n};\n")),(0,i.kt)("h2",{id:"approach-2-bfs-colouring"},"Approach 2: BFS Colouring"),(0,i.kt)("p",null,"Same idea but using BFS."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isBipartite(vector<vector<int>>& graph) {\n        int n = graph.size();\n        vector<int> vis(n, -1);\n        queue<int> q; \n        for (int i = 0; i < n; i++) {\n            if (vis[i] == -1) {\n                vis[i] = 0;\n                q.push(i);\n                while (!q.empty()) {\n                    int u = q.front(); q.pop();\n                    for (int v : graph[u])  {\n                        if (vis[v] == -1) { \n                            vis[v] = vis[u] ^ 1; \n                            q.push(v); \n                        }  else if (vis[v] == vis[u]) {\n                            return false;\n                        }\n                    }\n                }\n            } \n        }\n        return true;\n    }\n};\n")),(0,i.kt)("h2",{id:"approach-3-custom-template"},"Approach 3: Custom Template"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"is_bipartite Template"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"struct is_bipartite {\n  int V;\n  vector<vector<int>> adj;\n  vector<int> depth;\n  vector<bool> visited;\n\n  is_bipartite(int v = -1) {\n    if (v >= 0) init(v);\n  }\n\n  void init(int v) {\n    V = v;\n    adj.assign(V, {});\n  }\n\n  void add(int a, int b) {\n    adj[a].push_back(b);\n    adj[b].push_back(a);\n  }\n\n  vector<array<vector<int>, 2>> components;\n\n  bool dfs(int node, int parent) {\n    assert(!visited[node]);\n    visited[node] = true;\n    depth[node] = parent < 0 ? 0 : depth[parent] + 1;\n    components.back()[depth[node] % 2].push_back(node);\n    for (int h : adj[node])\n      if (h != parent) {\n        if (!visited[h] && !dfs(h, node)) return false;\n        if (depth[node] % 2 == depth[h] % 2) return false;\n      }\n    return true;\n  }\n\n  bool solve() {\n    depth.assign(V, -1);\n    visited.assign(V, false);\n    components = {};\n    for (int i = 0; i < V; i++)\n      if (!visited[i]) {\n        components.emplace_back();\n        if (!dfs(i, -1)) return false;\n      }\n    return true;\n  }\n}; \n\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool isBipartite(vector<vector<int>>& graph) {\n        int n = graph.size();\n        // init is_bipartite\n        is_bipartite c(n);\n        // iterate input and build the edges\n        for (int i = 0; i < n; i++) {\n            int from = i;\n            for (auto& to : graph[from]) {\n                c.add(from, to);\n                c.add(to, from);\n            }\n        }\n        // call solve to get the answer\n        return c.solve();\n    }\n};\n")))}h.isMDXComponent=!0}}]);
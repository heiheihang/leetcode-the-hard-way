"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[1221],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),d=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(r),m=o,w=c["".concat(p,".").concat(m)]||c[m]||u[m]||a;return r?n.createElement(w,i(i({ref:t},s),{},{components:r})):n.createElement(w,i({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},96194:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],l={description:"Author: @TBC | https://leetcode.com/problems/merge-strings-alternately/"},p="1768 - Merge Strings Alternately (Easy)",d={unversionedId:"1700-1799/merge-strings-alternately-easy",id:"1700-1799/merge-strings-alternately-easy",title:"1768 - Merge Strings Alternately (Easy)",description:"Author: @TBC | https://leetcode.com/problems/merge-strings-alternately/",source:"@site/solutions/1700-1799/1768-merge-strings-alternately-easy.md",sourceDirName:"1700-1799",slug:"/1700-1799/merge-strings-alternately-easy",permalink:"/leetcode-the-hard-way/solutions/1700-1799/merge-strings-alternately-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/1700-1799/1768-merge-strings-alternately-easy.md",tags:[],version:"current",sidebarPosition:1768,frontMatter:{description:"Author: @TBC | https://leetcode.com/problems/merge-strings-alternately/"},sidebar:"tutorialSidebar",previous:{title:"1762 - Buildings With an Ocean View (Medium)",permalink:"/leetcode-the-hard-way/solutions/1700-1799/buildings-with-an-ocean-view-medium"},next:{title:"1770 - Maximum Score from Performing Multiplication Operations (Medium)",permalink:"/leetcode-the-hard-way/solutions/1700-1799/maximum-score-from-performing-multiplication-operations-medium"}},s={},u=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Two Pointers",id:"approach-1-two-pointers",level:2}],c={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"1768---merge-strings-alternately-easy"},"1768 - Merge Strings Alternately (Easy)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given two strings ",(0,a.kt)("inlineCode",{parentName:"p"},"word1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"word2"),". Merge the strings by adding letters in alternating order, starting with ",(0,a.kt)("inlineCode",{parentName:"p"},"word1"),". If a string is longer than the other, append the additional letters onto the end of the merged string."),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the merged string.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: word1 = "abc", word2 = "pqr"\nOutput: "apbqcr"\nExplanation: The merged string will be merged as so:\nword1:  a   b   c\nword2:    p   q   r\nmerged: a p b q c r\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: word1 = "ab", word2 = "pqrs"\nOutput: "apbqrs"\nExplanation: Notice that as word2 is longer, "rs" is appended to the end.\nword1:  a   b \nword2:    p   q   r   s\nmerged: a p b q   r   s\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: word1 = "abcd", word2 = "pq"\nOutput: "apbqcd"\nExplanation: Notice that as word1 is longer, "cd" is appended to the end.\nword1:  a   b   c   d\nword2:    p   q \nmerged: a p b q c   d\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= word1.length, word2.length <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"word1")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"word2")," consist of lowercase English letters.")),(0,a.kt)("h2",{id:"approach-1-two-pointers"},"Approach 1: Two Pointers"),(0,a.kt)("p",null,"We define two pointers, ",(0,a.kt)("inlineCode",{parentName:"p"},"pointer_for_word1"),"and ",(0,a.kt)("inlineCode",{parentName:"p"},"pointer_for_word2")," . We then iterate the letters from both words until we have exhausted one of them. After that, we exhaust the remaining word (if both words have different lengths)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def mergeAlternately(self, word1: str, word2: str) -> str:\n        \n        #initialize the 2 pointers for word1 and word2\n        pointer_for_word1 = 0\n        pointer_for_word2 = 0\n        \n        #initialize the 2 lengths of word1 and word2\n        length_of_word1 = len(word1)\n        length_of_word2 = len(word2)\n        \n        #initialize result list\n        result = []\n        \n        #we iterate each letter in word1 and word2 until we have exhausted one of them\n        while(pointer_for_word1 < length_of_word1 and pointer_for_word2 < length_of_word2):\n            \n            #add a letter from word1, then a letter from word2\n            result.append(word1[pointer_for_word1])\n            result.append(word2[pointer_for_word2])\n            \n            #move the two pointers\n            pointer_for_word1 += 1\n            pointer_for_word2 += 1\n        \n        #if word1 is not exhausted, add its remaining letters to result\n        while(pointer_for_word1 < length_of_word1):\n            result.append(word1[pointer_for_word1])\n            pointer_for_word1 += 1\n            \n        #if word2 is not exhausted, add its remaining letters to result\n        while(pointer_for_word2 < length_of_word2):\n            result.append(word2[pointer_for_word2])\n            pointer_for_word2 += 1\n        \n        #return the string of the result list\n        return "".join(result)\n')))}m.isMDXComponent=!0}}]);
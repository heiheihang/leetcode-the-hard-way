"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[6321],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return c}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var m=a.createContext({}),s=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(m.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),c=i,k=u["".concat(m,".").concat(c)]||u[c]||d[c]||r;return t?a.createElement(k,o(o({ref:n},p),{},{components:t})):a.createElement(k,o({ref:n},p))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},88668:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return m},default:function(){return c},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var a=t(87462),i=t(63366),r=(t(67294),t(3905)),o=["components"],l={description:"Author: @wingkwong| https://leetcode.com/problems/design-an-atm-machine/"},m="2241 - Design an ATM Machine (Medium)",s={unversionedId:"2200-2299/design-an-atm-machine-medium",id:"2200-2299/design-an-atm-machine-medium",title:"2241 - Design an ATM Machine (Medium)",description:"Author: @wingkwong| https://leetcode.com/problems/design-an-atm-machine/",source:"@site/solutions/2200-2299/2241-design-an-atm-machine-medium.md",sourceDirName:"2200-2299",slug:"/2200-2299/design-an-atm-machine-medium",permalink:"/leetcode-the-hard-way/solutions/2200-2299/design-an-atm-machine-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/2200-2299/2241-design-an-atm-machine-medium.md",tags:[],version:"current",sidebarPosition:2241,frontMatter:{description:"Author: @wingkwong| https://leetcode.com/problems/design-an-atm-machine/"},sidebar:"tutorialSidebar",previous:{title:"2240 - Number of Ways to Buy Pens and Pencils (Medium)",permalink:"/leetcode-the-hard-way/solutions/2200-2299/number-of-ways-to-buy-pens-and-pencils-medium"},next:{title:"2242 - Maximum Score of a Node Sequence (Hard)",permalink:"/leetcode-the-hard-way/solutions/2200-2299/maximum-score-of-a-node-sequence-hard"}},p={},d=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1:  Implementation",id:"approach-1--implementation",level:2}],u={toc:d};function c(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2241---design-an-atm-machine-medium"},"2241 - Design an ATM Machine (Medium)"),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"There is an ATM machine that stores banknotes of ",(0,r.kt)("inlineCode",{parentName:"p"},"5")," denominations: ",(0,r.kt)("inlineCode",{parentName:"p"},"20"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"50"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"100"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"200"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"500")," dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money."),(0,r.kt)("p",null,"When withdrawing, the machine prioritizes using banknotes of ",(0,r.kt)("strong",{parentName:"p"},"larger")," values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For example, if you want to withdraw ",(0,r.kt)("inlineCode",{parentName:"li"},"$300")," and there are ",(0,r.kt)("inlineCode",{parentName:"li"},"2")," ",(0,r.kt)("inlineCode",{parentName:"li"},"$50")," banknotes, ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," ",(0,r.kt)("inlineCode",{parentName:"li"},"$100")," banknote, and ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," ",(0,r.kt)("inlineCode",{parentName:"li"},"$200")," banknote, then the machine will use the ",(0,r.kt)("inlineCode",{parentName:"li"},"$100")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"$200")," banknotes."),(0,r.kt)("li",{parentName:"ul"},"However, if you try to withdraw ",(0,r.kt)("inlineCode",{parentName:"li"},"$600")," and there are ",(0,r.kt)("inlineCode",{parentName:"li"},"3")," ",(0,r.kt)("inlineCode",{parentName:"li"},"$200")," banknotes and ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," ",(0,r.kt)("inlineCode",{parentName:"li"},"$500")," banknote, then the withdraw request will be rejected because the machine will first try to use the ",(0,r.kt)("inlineCode",{parentName:"li"},"$500")," banknote and then be unable to use banknotes to complete the remaining ",(0,r.kt)("inlineCode",{parentName:"li"},"$100"),". Note that the machine is ",(0,r.kt)("strong",{parentName:"li"},"not")," allowed to use the ",(0,r.kt)("inlineCode",{parentName:"li"},"$200")," banknotes instead of the ",(0,r.kt)("inlineCode",{parentName:"li"},"$500")," banknote.")),(0,r.kt)("p",null,"Implement the ATM class:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ATM()")," Initializes the ATM object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"void deposit(int[] banknotesCount)")," Deposits new banknotes in the order ",(0,r.kt)("inlineCode",{parentName:"li"},"$20"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"$50"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"$100"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"$200"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"$500"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"int[] withdraw(int amount)")," Returns an array of length ",(0,r.kt)("inlineCode",{parentName:"li"},"5")," of the number of banknotes that will be handed to the user in the order ",(0,r.kt)("inlineCode",{parentName:"li"},"$20"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"$50"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"$100"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"$200"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"$500"),", and update the number of banknotes in the ATM after withdrawing. Returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[-1]")," if it is not possible (do ",(0,r.kt)("strong",{parentName:"li"},"not")," withdraw any banknotes in this case).")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Input\n["ATM", "deposit", "withdraw", "deposit", "withdraw", "withdraw"]\n[[], [[0,0,1,2,1]], [600], [[0,1,0,1,1]], [600], [550]]\nOutput\n[null, null, [0,0,1,0,1], null, [-1], [0,1,0,0,1]]\n\nExplanation\nATM atm = new ATM();\natm.deposit([0,0,1,2,1]); // Deposits 1 $100 banknote, 2 $200 banknotes,\n                          // and 1 $500 banknote.\natm.withdraw(600);        // Returns [0,0,1,0,1]. The machine uses 1 $100 banknote\n                          // and 1 $500 banknote. The banknotes left over in the\n                          // machine are [0,0,0,2,0].\natm.deposit([0,1,0,1,1]); // Deposits 1 $50, $200, and $500 banknote.\n                          // The banknotes in the machine are now [0,1,0,3,1].\natm.withdraw(600);        // Returns [-1]. The machine will try to use a $500 banknote\n                          // and then be unable to complete the remaining $100,\n                          // so the withdraw request will be rejected.\n                          // Since the request is rejected, the number of banknotes\n                          // in the machine is not modified.\natm.withdraw(550);        // Returns [0,1,0,0,1]. The machine uses 1 $50 banknote\n                          // and 1 $500 banknote.\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"banknotesCount.length == 5")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0 <= banknotesCount[i] <= 10^9")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= amount <= 109")),(0,r.kt)("li",{parentName:"ul"},"At most ",(0,r.kt)("inlineCode",{parentName:"li"},"5000")," calls ",(0,r.kt)("strong",{parentName:"li"},"in total")," will be made to ",(0,r.kt)("inlineCode",{parentName:"li"},"withdraw")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"deposit"),"."),(0,r.kt)("li",{parentName:"ul"},"At least ",(0,r.kt)("strong",{parentName:"li"},"one")," call will be made to each function ",(0,r.kt)("inlineCode",{parentName:"li"},"withdraw")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"deposit"),".")),(0,r.kt)("h2",{id:"approach-1--implementation"},"Approach 1:  Implementation"),(0,r.kt)("p",null,"Use ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"b"),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"k")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"bank")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"bank")))))," to track the count of each note. When we withdraw, we only use the max possible currency count. If the amount still possible, then return -1. Otherwise, update ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"b"),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"k")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"bank")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"bank")))))," and return how many we've taken."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class ATM {\npublic:\n    ATM() {\n        bank = vector<long long>(5);\n        notes = { 20, 50, 100, 200, 500 };\n    }\n    \n    void deposit(vector<int> banknotesCount) {\n        for (int i = 0; i < 5; i++) {\n            bank[i] += banknotesCount[i];\n        }\n    }\n    \n    vector<int> withdraw(int amount) {\n        vector<int> take(5);\n        for (int i = 4; i >= 0; i--) {\n            take[i] = min(amount / notes[i], bank[i]);\n            amount -= take[i] * notes[i];\n        }\n        if (amount) return vector<int>{-1};\n        for (int i = 0; i < 5; i++) bank[i] -= take[i];\n        return take;\n    }\nprivate:\n    vector<long long> bank, notes;\n};\n\n/**\n * Your ATM object will be instantiated and called as such:\n * ATM* obj = new ATM();\n * obj->deposit(banknotesCount);\n * vector<int> param_2 = obj->withdraw(amount);\n */\n")))}c.isMDXComponent=!0}}]);
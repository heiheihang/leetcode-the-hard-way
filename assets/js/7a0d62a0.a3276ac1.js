"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[4631],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(n),h=o,d=m["".concat(s,".").concat(h)]||m[h]||u[h]||i;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},65098:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=n(92194),p=["components"],s={description:"Author: @wingkwong,@heiheihang | https://leetcode.com/problems/k-closest-points-to-origin/"},l="0973 - K Closest Points to Origin (Medium)",c={unversionedId:"0900-0999/k-closest-points-to-origin-medium",id:"0900-0999/k-closest-points-to-origin-medium",title:"0973 - K Closest Points to Origin (Medium)",description:"Author: @wingkwong,@heiheihang | https://leetcode.com/problems/k-closest-points-to-origin/",source:"@site/solutions/0900-0999/0973-k-closest-points-to-origin-medium.md",sourceDirName:"0900-0999",slug:"/0900-0999/k-closest-points-to-origin-medium",permalink:"/leetcode-the-hard-way/solutions/0900-0999/k-closest-points-to-origin-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0900-0999/0973-k-closest-points-to-origin-medium.md",tags:[],version:"current",sidebarPosition:973,frontMatter:{description:"Author: @wingkwong,@heiheihang | https://leetcode.com/problems/k-closest-points-to-origin/"},sidebar:"tutorialSidebar",previous:{title:"0952 - Largest Component Size by Common Factor (Hard)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/largest-component-size-by-common-factor-hard"},next:{title:"0976 - Largest Perimeter Triangle (Easy)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/largest-perimeter-triangle-easy"}},u={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: nth_element",id:"approach-1-nth_element",level:2},{value:"Approach 2: Heap (Python)",id:"approach-2-heap-python",level:2}],h={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,p);return(0,i.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0973---k-closest-points-to-origin-medium"},"0973 - K Closest Points to Origin (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/k-closest-points-to-origin/"},"https://leetcode.com/problems/k-closest-points-to-origin/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"points")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"points[i] = [xi, yi]")," represents a point on the ",(0,i.kt)("strong",{parentName:"p"},"X-Y")," plane and an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),", return the ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," closest points to the origin ",(0,i.kt)("inlineCode",{parentName:"p"},"(0, 0)"),"."),(0,i.kt)("p",null,"The distance between two points on the ",(0,i.kt)("strong",{parentName:"p"},"X-Y")," plane is the Euclidean distance (i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"\u221a(x1 - x2)2 + (y1 - y2)2"),")."),(0,i.kt)("p",null,"You may return the answer in ",(0,i.kt)("strong",{parentName:"p"},"any order"),". The answer is ",(0,i.kt)("strong",{parentName:"p"},"guaranteed")," to be ",(0,i.kt)("strong",{parentName:"p"},"unique")," (except for the order that it is in)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/03/03/closestplane1.jpg",alt:null})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: points = [[1,3],[-2,2]], k = 1\nOutput: [[-2,2]]\nExplanation:\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: points = [[3,3],[5,-1],[-2,4]], k = 2\nOutput: [[3,3],[-2,4]]\nExplanation: The answer [[-2,4],[3,3]] would also be accepted.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= k <= points.length <= 10^4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-10^4 < xi, yi < 10^4"))),(0,i.kt)("h2",{id:"approach-1-nth_element"},"Approach 1: nth_element"),(0,i.kt)(a.Z,{names:"@wingkwong",mdxType:"Authors"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {\n        // we don't need to care about the exact order \n        // nth_element approach is enough\n        nth_element(points.begin(), points.begin() + K, points.end(),[](vector<int>& q, vector<int>& p) {\n            // sort by Euclidean distance\n            // dist(q, p) = sqrt( (q1 - p1) * (q1 - p1) + (q2 - p2) * (q2 - p2) )\n            // since we are comparing the points with the origin (0,0)\n            // dist(q, p) = sqrt( (q1) * (q1) + (q2) * (q2) )\n            // and we don't need to perform sqrt as sqrt(a) must be smaller than sqrt(b) if a < b\n            return q[0] * q[0] + q[1] * q[1] < p[0] * p[0] + p[1] * p[1];\n        });\n        // resize points to show K clostest points\n        points.resize(K);\n        return points;\n    }\n};\n")),(0,i.kt)("h2",{id:"approach-2-heap-python"},"Approach 2: Heap (Python)"),(0,i.kt)(a.Z,{names:"@heiheihang",mdxType:"Authors"}),(0,i.kt)("p",null,"We can use a max heap of size ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," to store the ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," points closest to the origin. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"class Solution:\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        h = []\n        \n        for a, b in points:\n            \n            dist = a ** 2 + b ** 2\n            heappush(h, [-dist, a, b])\n            if len(h) > k:\n                heappop(h)\n        \n        res = []\n        \n        while h:\n            res.append([h[0][1], h[0][2]])\n            heappop(h)\n            \n        return res\n")))}d.isMDXComponent=!0},92194:function(e,t,n){n.d(t,{Z:function(){return o}});var r=n(67294);function o(e){var t=e.names.split(",");return r.createElement("div",{className:"author-wrapper"},t.length>1?"Authors":"Author",":",t.map((function(e,t){return r.createElement("span",{key:t,className:"author-tag"},e)})))}}}]);
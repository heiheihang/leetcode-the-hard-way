"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[333],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return u}});var i=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},a=Object.keys(t);for(i=0;i<a.length;i++)n=a[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(i=0;i<a.length;i++)n=a[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=i.createContext({}),l=function(t){var e=i.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=l(t.components);return i.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},d=i.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,p=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),d=l(n),u=r,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||a;return n?i.createElement(h,o(o({ref:e},c),{},{components:n})):i.createElement(h,o({ref:e},c))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6763:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/cheapest-flights-within-k-stops/"},p="0787 - Cheapest Flights Within K Stops (Medium)",l={unversionedId:"0700-0799/cheapest-flights-within-k-stops-medium",id:"0700-0799/cheapest-flights-within-k-stops-medium",title:"0787 - Cheapest Flights Within K Stops (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/cheapest-flights-within-k-stops/",source:"@site/solutions/0700-0799/0787-cheapest-flights-within-k-stops-medium.md",sourceDirName:"0700-0799",slug:"/0700-0799/cheapest-flights-within-k-stops-medium",permalink:"/leetcode-the-hard-way/solutions/0700-0799/cheapest-flights-within-k-stops-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0700-0799/0787-cheapest-flights-within-k-stops-medium.md",tags:[],version:"current",lastUpdatedBy:"Wing-Kam Wong",lastUpdatedAt:1652613881,formattedLastUpdatedAt:"5/15/2022",sidebarPosition:787,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/cheapest-flights-within-k-stops/"},sidebar:"tutorialSidebar",previous:{title:"0785 -  Is Graph Bipartite? (Medium)",permalink:"/leetcode-the-hard-way/solutions/0700-0799/is-graph-bipartite-medium"},next:{title:"0799 - Champagne Tower (Medium)",permalink:"/leetcode-the-hard-way/solutions/0700-0799/champagne-tower-medium"}},c={},m=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Bellman Ford",id:"approach-1-bellman-ford",level:2}],d={toc:m};function u(t){var e=t.components,n=(0,r.Z)(t,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0787---cheapest-flights-within-k-stops-medium"},"0787 - Cheapest Flights Within K Stops (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"There are ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," cities connected by some number of flights. You are given an array ",(0,a.kt)("inlineCode",{parentName:"p"},"flights")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"flights[i] = [fromi, toi, pricei]")," indicates that there is a flight from city ",(0,a.kt)("inlineCode",{parentName:"p"},"fromi")," to city ",(0,a.kt)("inlineCode",{parentName:"p"},"toi")," with cost ",(0,a.kt)("inlineCode",{parentName:"p"},"pricei"),"."),(0,a.kt)("p",null,"You are also given three integers ",(0,a.kt)("inlineCode",{parentName:"p"},"src"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"dst"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("strong",{parentName:"em"},"the cheapest price")," from")," ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," ",(0,a.kt)("em",{parentName:"p"},"to")," ",(0,a.kt)("inlineCode",{parentName:"p"},"dst")," ",(0,a.kt)("em",{parentName:"p"},"with at most")," ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," ",(0,a.kt)("em",{parentName:"p"},"stops.")," If there is no such route, return __ ",(0,a.kt)("inlineCode",{parentName:"p"},"-1"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-3drawio.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\nOutput: 700\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-1drawio.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\nOutput: 200\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-2drawio.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\nOutput: 500\nExplanation:\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 100")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= flights.length <= (n * (n - 1) / 2)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"flights[i].length == 3")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= fromi, toi < n")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fromi != toi")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= pricei <= 104")),(0,a.kt)("li",{parentName:"ul"},"There will not be any multiple flights between two cities."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= src, dst, k < n")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"src != dst"))),(0,a.kt)("h2",{id:"approach-1-bellman-ford"},"Approach 1: Bellman Ford"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    template<typename T_a3, typename T_vector>\n    void bellman_ford(T_a3 &g, T_vector &dist, int src, int mx_edges) {\n    // dist[i] : dist to reach node j using at most i edges from src\n        dist[src] = 0;\n        for (int i = 0; i <= mx_edges; i++) {\n            T_vector ndist = dist;\n            for (auto x : g) {\n                auto [from, to, cost] = x;\n                ndist[to] = min(ndist[to], dist[from] + cost);\n            }\n            dist = ndist;\n        }\n    }\n    \n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        vector<array<int, 3>> g;\n        vector<int> dist(n, 1e9);\n        for (auto f : flights) g.push_back({f[0], f[1], f[2]});\n        bellman_ford(g, dist, src, k);\n        return dist[dst] == 1e9 ? -1 : dist[dst];\n    }\n};\n")))}u.isMDXComponent=!0}}]);
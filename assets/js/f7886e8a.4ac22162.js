"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[702],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},51444:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/valid-mountain-array/"},p="0941 - Valid Mountain Array (Easy)",u={unversionedId:"0900-0999/valid-mountain-array-easy",id:"0900-0999/valid-mountain-array-easy",title:"0941 - Valid Mountain Array (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/valid-mountain-array/",source:"@site/solutions/0900-0999/0941-valid-mountain-array-easy.md",sourceDirName:"0900-0999",slug:"/0900-0999/valid-mountain-array-easy",permalink:"/leetcode-the-hard-way/solutions/0900-0999/valid-mountain-array-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0900-0999/0941-valid-mountain-array-easy.md",tags:[],version:"current",sidebarPosition:941,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/valid-mountain-array/"},sidebar:"tutorialSidebar",previous:{title:"0936 - Stamping The Sequence (Hard)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/stamping-the-sequence-hard"},next:{title:"0946 - Validate Stack Sequences (Medium)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/validate-stack-sequences-medium"}},s={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Prefix and Suffix",id:"approach-1-prefix-and-suffix",level:2},{value:"C++",id:"c",level:3},{value:"Approach 2: One Pass",id:"approach-2-one-pass",level:2},{value:"C++",id:"c-1",level:3}],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0941---valid-mountain-array-easy"},"0941 - Valid Mountain Array (Easy)"),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given an array of integers ",(0,i.kt)("inlineCode",{parentName:"p"},"arr"),", return ",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"true")," if and only if it is a valid mountain array"),"."),(0,i.kt)("p",null,"Recall that arr is a mountain array if and only if:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arr.length >= 3")),(0,i.kt)("li",{parentName:"ul"},"There exists some ",(0,i.kt)("inlineCode",{parentName:"li"},"i")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"0 < i < arr.length - 1")," such that:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arr[0] < arr[1] < ... < arr[i - 1] < arr[i]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arr[i] > arr[i + 1] > ... > arr[arr.length - 1]"))))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png",alt:null})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: arr = [2,1]\nOutput: false\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: arr = [3,5,5]\nOutput: false\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: arr = [0,3,2,1]\nOutput: true\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= arr.length <= 10^4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0 <= arr[i] <= 10^4"))),(0,i.kt)("h2",{id:"approach-1-prefix-and-suffix"},"Approach 1: Prefix and Suffix"),(0,i.kt)("p",null,"If the array length is less than 3, then it must be false. Otherwise, we can calculate the prefix and suffix.  ",(0,i.kt)("inlineCode",{parentName:"p"},"prefix[i]")," means it is a strictly increasing array from the first mountain till mountain ",(0,i.kt)("inlineCode",{parentName:"p"},"i"),". Similarly, ",(0,i.kt)("inlineCode",{parentName:"p"},"suffix[j]")," means it is a strictly decreasing array from the last mountain till mountain ",(0,i.kt)("inlineCode",{parentName:"p"},"j"),". If there is a certain point ",(0,i.kt)("inlineCode",{parentName:"p"},"k")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"prefix[k]")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"suffix[k]")," both true, then that would be the peak of a valid mountain."),(0,i.kt)("h3",{id:"c"},"C++"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool validMountainArray(vector<int>& arr) {\n        int n = arr.size();\n        if(n < 3) return false;\n        vector<int> p(n, 0), s(n, 0); // prefix & suffix\n        p[0] = s[n - 1] = 1;\n        for(int i = 1; i < n - 1; i++) p[i] = arr[i] > arr[i - 1] && p[i - 1];\n        for(int i = n - 2; i >= 1; i--) s[i] = arr[i] > arr[i + 1] && s[i + 1];\n        for(int i = 1; i < n - 1; i++) if(p[i] && s[i]) return true;\n        return false;\n    }\n};\n")),(0,i.kt)("h2",{id:"approach-2-one-pass"},"Approach 2: One Pass"),(0,i.kt)("p",null,"From approach 1, we can see that both prefix and suffix array only record if it is a strictly increasing or decreasing array till certain point. We can optimise it using two pointers ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"j"),", where pointer ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," is to check the strictly increasing array and pointer ",(0,i.kt)("inlineCode",{parentName:"p"},"j")," is to check the strictly decreasing array.  If they stop at the same point, then that would be the peak of the same mountain."),(0,i.kt)("h3",{id:"c-1"},"C++"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool validMountainArray(vector<int>& arr) {\n        int n = arr.size(), i = 0, j = n - 1;\n        while (i + 1 < n && arr[i] < arr[i + 1]) i++;\n        while (j - 1 > 0 && arr[j - 1] > arr[j]) j--;\n        return i == j && i > 0 && j < n - 1;\n    }\n};\n")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[4624],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return g}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=u(n),g=i,d=c["".concat(l,".").concat(g)]||c[g]||p[g]||a;return n?r.createElement(d,o(o({ref:t},m),{},{components:n})):r.createElement(d,o({ref:t},m))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},36327:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/largest-3-same-digit-number-in-string/"},l="2264 - Largest 3-Same-Digit Number in String (Easy)",u={unversionedId:"2200-2299/largest-3-same-digit-number-in-string-easy",id:"2200-2299/largest-3-same-digit-number-in-string-easy",title:"2264 - Largest 3-Same-Digit Number in String (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/largest-3-same-digit-number-in-string/",source:"@site/solutions/2200-2299/2264-largest-3-same-digit-number-in-string-easy.md",sourceDirName:"2200-2299",slug:"/2200-2299/largest-3-same-digit-number-in-string-easy",permalink:"/leetcode-the-hard-way/solutions/2200-2299/largest-3-same-digit-number-in-string-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/2200-2299/2264-largest-3-same-digit-number-in-string-easy.md",tags:[],version:"current",sidebarPosition:2264,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/largest-3-same-digit-number-in-string/"},sidebar:"tutorialSidebar",previous:{title:"2262 - Total Appeal of A String (Hard)",permalink:"/leetcode-the-hard-way/solutions/2200-2299/total-appeal-of-a-string-hard"},next:{title:"2265 - Count Nodes Equal to Average of Subtree (Medium)",permalink:"/leetcode-the-hard-way/solutions/2200-2299/count-nodes-equal-to-average-of-subtree-medium"}},m={},p=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Check the max digit",id:"approach-1-check-the-max-digit",level:2}],c={toc:p};function g(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2264---largest-3-same-digit-number-in-string-easy"},"2264 - Largest 3-Same-Digit Number in String (Easy)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are given a string ",(0,a.kt)("inlineCode",{parentName:"p"},"num")," representing a large integer. An integer is ",(0,a.kt)("strong",{parentName:"p"},"good")," if it meets the following conditions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"It is a ",(0,a.kt)("strong",{parentName:"li"},"substring")," of ",(0,a.kt)("inlineCode",{parentName:"li"},"num")," with length ",(0,a.kt)("inlineCode",{parentName:"li"},"3"),"."),(0,a.kt)("li",{parentName:"ul"},"It consists of only one unique digit.")),(0,a.kt)("p",null,"Return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"maximum good")," integer as a ",(0,a.kt)("strong",{parentName:"em"},"string")," or an empty string")," ",(0,a.kt)("inlineCode",{parentName:"p"},'""')," ",(0,a.kt)("em",{parentName:"p"},"if no such integer exists"),"."),(0,a.kt)("p",null,"Note:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("strong",{parentName:"li"},"substring")," is a contiguous sequence of characters within a string."),(0,a.kt)("li",{parentName:"ul"},"There may be ",(0,a.kt)("strong",{parentName:"li"},"leading zeroes")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"num")," or a good integer.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: num = "6777133339"\nOutput: "777"\nExplanation: There are two distinct good integers: "777" and "333".\n"777" is the largest, so we return "777".\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: num = "2300019"\nOutput: "000"\nExplanation: "000" is the only good integer.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input: num = "42352338"\nOutput: ""\nExplanation: No substring of length 3 consists of only one unique digit. Therefore, there are no good integers.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"3 <= num.length <= 1000")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"num")," only consists of digits.")),(0,a.kt)("h2",{id:"approach-1-check-the-max-digit"},"Approach 1: Check the max digit"),(0,a.kt)("p",null,"Iterate num and check if the current character is same as the previous two. If so, store the maximum digit and render at the end."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    string largestGoodInteger(string num) {\n        int mx = -1;\n        for (int i = 2; i < num.size(); i++) {\n            // check if has one unique digit\n            if (num[i] == num[i - 1] && num[i - 1] == num[i - 2]) {\n                // if so, record the max digit\n                mx = max(mx, num[i] - '0');\n            }\n        }\n        // if mx is -1, then no such substring exists\n        // otherwise, render the ans with the max digit\n        return mx == -1 ? \"\" : string(3, mx + '0');\n    }\n};\n")))}g.isMDXComponent=!0}}]);
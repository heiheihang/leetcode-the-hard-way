"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[6838],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,h=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},69002:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=n(8539),s=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/count-number-of-texts/"},p="2266 - Count Number of Texts (Medium)",u={unversionedId:"2200-2299/count-number-of-texts-medium",id:"2200-2299/count-number-of-texts-medium",title:"2266 - Count Number of Texts (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/count-number-of-texts/",source:"@site/solutions/2200-2299/2266-count-number-of-texts-medium.md",sourceDirName:"2200-2299",slug:"/2200-2299/count-number-of-texts-medium",permalink:"/leetcode-the-hard-way/solutions/2200-2299/count-number-of-texts-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/2200-2299/2266-count-number-of-texts-medium.md",tags:[],version:"current",sidebarPosition:2266,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/count-number-of-texts/"},sidebar:"tutorialSidebar",previous:{title:"2265 - Count Nodes Equal to Average of Subtree (Medium)",permalink:"/leetcode-the-hard-way/solutions/2200-2299/count-nodes-equal-to-average-of-subtree-medium"},next:{title:"2267 - Check if There Is a Valid Parentheses String Path (Hard)",permalink:"/leetcode-the-hard-way/solutions/2200-2299/check-if-there-is-a-valid-parentheses-string-path-hard"}},c={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Dynamic Programming",id:"approach-1-dynamic-programming",level:2}],d={toc:m};function h(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2266---count-number-of-texts-medium"},"2266 - Count Number of Texts (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-number-of-texts/"},"https://leetcode.com/problems/count-number-of-texts/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Alice is texting Bob using her phone. The ",(0,i.kt)("strong",{parentName:"p"},"mapping")," of digits to letters is shown in the figure below."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png",alt:null})),(0,i.kt)("p",null,"In order to ",(0,i.kt)("strong",{parentName:"p"},"add")," a letter, Alice has to ",(0,i.kt)("strong",{parentName:"p"},"press")," the key of the corresponding digit ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," times, where ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," is the position of the letter in the key."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example, to add the letter ",(0,i.kt)("inlineCode",{parentName:"li"},"'s'"),", Alice has to press ",(0,i.kt)("inlineCode",{parentName:"li"},"'7'")," four times. Similarly, to add the letter ",(0,i.kt)("inlineCode",{parentName:"li"},"'k'"),", Alice has to press ",(0,i.kt)("inlineCode",{parentName:"li"},"'5'")," twice."),(0,i.kt)("li",{parentName:"ul"},"Note that the digits ",(0,i.kt)("inlineCode",{parentName:"li"},"'0'")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"'1'")," do not map to any letters, so Alice ",(0,i.kt)("strong",{parentName:"li"},"does not")," use them.")),(0,i.kt)("p",null,"However, due to an error in transmission, Bob did not receive Alice's text message but received a ",(0,i.kt)("strong",{parentName:"p"},"string of pressed keys")," instead."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For example, when Alice sent the message ",(0,i.kt)("inlineCode",{parentName:"li"},'"bob"'),", Bob received the string ",(0,i.kt)("inlineCode",{parentName:"li"},'"2266622"'),".")),(0,i.kt)("p",null,"Given a string ",(0,i.kt)("inlineCode",{parentName:"p"},"pressedKeys")," representing the string received by Bob, return ",(0,i.kt)("em",{parentName:"p"},"the ",(0,i.kt)("strong",{parentName:"em"},"total number of possible text messages")," Alice could have sent"),"."),(0,i.kt)("p",null,"Since the answer may be very large, return it ",(0,i.kt)("strong",{parentName:"p"},"modulo")," ",(0,i.kt)("inlineCode",{parentName:"p"},"109 + 7"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: pressedKeys = "22233"\nOutput: 8\nExplanation:\nThe possible text messages Alice could have sent are:\n"aaadd", "abdd", "badd", "cdd", "aaae", "abe", "bae", and "ce".\nSince there are 8 possible messages, we return 8.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: pressedKeys = "222222222222222222222222222222222222"\nOutput: 82876089\nExplanation:\nThere are 2082876103 possible text messages Alice could have sent.\nSince we need to return the answer modulo 109 + 7, we return 2082876103 % (109 + 7) = 82876089.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= pressedKeys.length <= 10^5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pressedKeys")," only consists of digits from ",(0,i.kt)("inlineCode",{parentName:"li"},"'2'")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"'9'"),".")),(0,i.kt)("h2",{id:"approach-1-dynamic-programming"},"Approach 1: Dynamic Programming"),(0,i.kt)("p",null,"Every digit except 7 and 9 has 3 keys. We can iterate the input and check previous 3 results. If it is 7 or 9, then check the previous 4 results."),(0,i.kt)(a.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int countTexts(string pressedKeys) {\n        int n = pressedKeys.size(), M = 1e9 + 7;\n        // dp[i]: total number of possible text messages ended at i-th character\n        vector<int> dp(n + 1);\n        // base case\n        dp[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            // take the previous one\n            dp[i] = dp[i - 1] % M;\n            // check for the case like 77\n            if (i > 1 && pressedKeys[i - 1] == pressedKeys[i - 2]) {\n                dp[i] = (dp[i] + dp[i - 2]) % M;\n                // check for the case like 777\n                if (i > 2 && pressedKeys[i - 1] == pressedKeys[i - 3]) {\n                    dp[i] = (dp[i] + dp[i - 3]) % M;\n                    // check for the case like 7777\n                    if (i > 3 && (pressedKeys[i - 1] == '7' || pressedKeys[i - 1] == '9') \n                        && pressedKeys[i - 1] == pressedKeys[i - 4]) {\n                        dp[i] = (dp[i] + dp[i - 4]) % M;\n                    }\n                }\n            }\n        }\n        return dp[n];\n    }\n};\n")))}h.isMDXComponent=!0},8539:function(e,t,n){n.d(t,{Z:function(){return o}});var r=n(67294);function o(e){var t=e.name;return r.createElement("div",{className:"solution-author-wrapper"},r.createElement("span",null,"This solution is written by ",t))}}}]);
"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[1902],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},45327:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var r=n(87462),i=n(63366),s=(n(67294),n(3905)),o=n(8539),a=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/sorting-the-sentence/",tags:["Sorting"]},p="1859 - Sorting the Sentence (Easy)",c={unversionedId:"1800-1899/sorting-the-sentence-easy",id:"1800-1899/sorting-the-sentence-easy",title:"1859 - Sorting the Sentence (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/sorting-the-sentence/",source:"@site/solutions/1800-1899/1859-sorting-the-sentence-easy.md",sourceDirName:"1800-1899",slug:"/1800-1899/sorting-the-sentence-easy",permalink:"/leetcode-the-hard-way/solutions/1800-1899/sorting-the-sentence-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/1800-1899/1859-sorting-the-sentence-easy.md",tags:[{label:"Sorting",permalink:"/leetcode-the-hard-way/solutions/tags/sorting"}],version:"current",sidebarPosition:1859,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/sorting-the-sentence/",tags:["Sorting"]},sidebar:"tutorialSidebar",previous:{title:"1855 - Maximum Distance Between a Pair of Values (Medium)",permalink:"/leetcode-the-hard-way/solutions/1800-1899/maximum-distance-between-a-pair-of-values-medium"},next:{title:"1866 - Number of Ways to Rearrange Sticks With K Sticks Visible (Hard)",permalink:"/leetcode-the-hard-way/solutions/1800-1899/number-of-ways-to-rearrange-sticks-with-k-sticks-visible-hard"}},u={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sorting with Comparator",id:"approach-1-sorting-with-comparator",level:2},{value:"Approach 2: Sorting without Comparator",id:"approach-2-sorting-without-comparator",level:2}],m={toc:d};function h(e){var t=e.components,n=(0,i.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"1859---sorting-the-sentence-easy"},"1859 - Sorting the Sentence (Easy)"),(0,s.kt)("h2",{id:"problem-link"},"Problem Link"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/sorting-the-sentence/"},"https://leetcode.com/problems/sorting-the-sentence/")),(0,s.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,s.kt)("p",null,"A ",(0,s.kt)("strong",{parentName:"p"},"sentence")," is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters."),(0,s.kt)("p",null,"A sentence can be ",(0,s.kt)("strong",{parentName:"p"},"shuffled")," by appending the ",(0,s.kt)("strong",{parentName:"p"},"1-indexed word position")," to each word then rearranging the words in the sentence."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"For example, the sentence ",(0,s.kt)("inlineCode",{parentName:"li"},'"This is a sentence"')," can be shuffled as ",(0,s.kt)("inlineCode",{parentName:"li"},'"sentence4 a3 is2 This1"')," or ",(0,s.kt)("inlineCode",{parentName:"li"},'"is2 sentence4 This1 a3"'),".")),(0,s.kt)("p",null,"Given a ",(0,s.kt)("strong",{parentName:"p"},"shuffled sentence")," ",(0,s.kt)("inlineCode",{parentName:"p"},"s")," containing no more than ",(0,s.kt)("inlineCode",{parentName:"p"},"9")," words, reconstruct and return ",(0,s.kt)("em",{parentName:"p"},"the original sentence"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 1:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Input: s = "is2 sentence4 This1 a3"\nOutput: "This is a sentence"\nExplanation: Sort the words in s to their original positions "This1 is2 a3 sentence4", then remove the numbers.\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 2:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Input: s = "Myself2 Me1 I4 and3"\nOutput: "Me Myself and I"\nExplanation: Sort the words in s to their original positions "Me1 Myself2 and3 I4", then remove the numbers.\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constraints:")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"2 <= s.length <= 200")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"s")," consists of lowercase and uppercase English letters, spaces, and digits from ",(0,s.kt)("inlineCode",{parentName:"li"},"1")," to ",(0,s.kt)("inlineCode",{parentName:"li"},"9"),"."),(0,s.kt)("li",{parentName:"ul"},"The number of words in ",(0,s.kt)("inlineCode",{parentName:"li"},"s")," is between ",(0,s.kt)("inlineCode",{parentName:"li"},"1")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"9"),"."),(0,s.kt)("li",{parentName:"ul"},"The words in ",(0,s.kt)("inlineCode",{parentName:"li"},"s")," are separated by a single space."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"s")," contains no leading or trailing spaces.")),(0,s.kt)("h2",{id:"approach-1-sorting-with-comparator"},"Approach 1: Sorting with Comparator"),(0,s.kt)(o.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    // split template\n    vector<string> split(string str, char delim) {\n        string line;\n        vector<string> res;\n        stringstream ss(str);\n        while(getline(ss, line, delim)) res.push_back(line);\n        return res;\n    }\n    \n    string sortSentence(string s) {\n        string ans;\n        // split the string by space\n        // "is2 sentence4 This1 a3" -> ["is2", "sentence4", "This1", "a3"]\n        vector<string> ss = split(s, \' \');\n        // we need to sort a pair of words with orders -> {word, order}\n        // so we use vector<pair<string, int>>\n        vector<pair<string, int>> v((int) ss.size());\n        // we put word in the first place\n        for (auto& x : ss) {\n            v.push_back({\n                x.substr(0, (int) x.size() - 1), // word\n                x.back() // order\n            });\n        }\n        // by default, sort() would sort the first element first, then sort the second one\n        // in this case, we would like to sort by the order which is the second element \n        // hence, we need to define a custom comparator\n        sort(v.begin(), v.end(), [&](const pair<string, int> &x, const pair<string, int>& y) {\n            // compare the second element\n            return x.second < y.second;\n        });\n        // build the final string\n        for (auto& x : v) {\n            if ((int) ans.size() > 0) ans += \' \'; \n            ans += x.first;\n        }\n        return ans;\n    }\n};\n')),(0,s.kt)("h2",{id:"approach-2-sorting-without-comparator"},"Approach 2: Sorting without Comparator"),(0,s.kt)(o.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    // split template\n    vector<string> split(string str, char delim) {\n        string line;\n        vector<string> res;\n        stringstream ss(str);\n        while(getline(ss, line, delim)) res.push_back(line);\n        return res;\n    }\n    \n    string sortSentence(string s) {\n        string ans;\n        // split the string by space\n        // "is2 sentence4 This1 a3" -> ["is2", "sentence4", "This1", "a3"]\n        vector<string> ss = split(s, \' \');\n        // we need to sort a pair of words with orders -> {order, word}\n        // so we use vector<pair<int, string>>\n        vector<pair<int, string>> v((int) ss.size());\n        // we put order in the first place \n        // so that we don\'t need to write a custom comparator in sorting\n        for (auto& x : ss) {\n            v.push_back({\n                x.back(), // order\n                x.substr(0, (int) x.size() - 1) // word\n            });\n        }\n        // sort it without a custom comparator\n        sort(v.begin(), v.end());\n        // build the final string\n        for (auto& x : v) {\n            if ((int) ans.size() > 0) ans += \' \'; \n            ans += x.second;\n        }\n        return ans;\n    }\n};\n')))}h.isMDXComponent=!0},8539:function(e,t,n){n.d(t,{Z:function(){return i}});var r=n(67294);function i(e){var t=e.name;return r.createElement("div",{className:"solution-author-wrapper"},r.createElement("span",null,"This solution is written by ",t))}}}]);
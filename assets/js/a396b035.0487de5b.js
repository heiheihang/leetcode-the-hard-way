"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[2467],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=o,b=c["".concat(s,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(b,i(i({ref:t},u),{},{components:n})):r.createElement(b,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},73094:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/"},s="0452 - Minimum Number of Arrows to Burst Balloons (Medium)",p={unversionedId:"0400-0499/minimum-number-of-arrows-to-burst-balloons-medium",id:"0400-0499/minimum-number-of-arrows-to-burst-balloons-medium",title:"0452 - Minimum Number of Arrows to Burst Balloons (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/",source:"@site/solutions/0400-0499/0452-minimum-number-of-arrows-to-burst-balloons-medium.md",sourceDirName:"0400-0499",slug:"/0400-0499/minimum-number-of-arrows-to-burst-balloons-medium",permalink:"/leetcode-the-hard-way/solutions/0400-0499/minimum-number-of-arrows-to-burst-balloons-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0400-0499/0452-minimum-number-of-arrows-to-burst-balloons-medium.md",tags:[],version:"current",sidebarPosition:452,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/"},sidebar:"tutorialSidebar",previous:{title:"0441 - Arranging Coins (Easy)",permalink:"/leetcode-the-hard-way/solutions/0400-0499/arranging-coins-easy"},next:{title:"0465 - Optimal Account Balancing (Hard)",permalink:"/leetcode-the-hard-way/solutions/0400-0499/optimal-account-balancing-hard"}},u={},m=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Greedy",id:"approach-1-greedy",level:2}],c={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0452---minimum-number-of-arrows-to-burst-balloons-medium"},"0452 - Minimum Number of Arrows to Burst Balloons (Medium)"),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"points")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"points[i] = [xstart, xend]")," denotes a balloon whose ",(0,a.kt)("strong",{parentName:"p"},"horizontal diameter")," stretches between ",(0,a.kt)("inlineCode",{parentName:"p"},"xstart")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"xend"),". You do not know the exact y-coordinates of the balloons."),(0,a.kt)("p",null,"Arrows can be shot up ",(0,a.kt)("strong",{parentName:"p"},"directly vertically")," (in the positive y-direction) from different points along the x-axis. A balloon with ",(0,a.kt)("inlineCode",{parentName:"p"},"xstart")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"xend")," is ",(0,a.kt)("strong",{parentName:"p"},"burst")," by an arrow shot at ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," if ",(0,a.kt)("inlineCode",{parentName:"p"},"xstart <= x <= xend"),". There is ",(0,a.kt)("strong",{parentName:"p"},"no limit")," to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path."),(0,a.kt)("p",null,"Given the array ",(0,a.kt)("inlineCode",{parentName:"p"},"points"),", return ",(0,a.kt)("em",{parentName:"p"},"the ",(0,a.kt)("strong",{parentName:"em"},"minimum")," number of arrows that must be shot to burst all balloons"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: points = [[10,16],[2,8],[1,6],[7,12]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: points = [[1,2],[3,4],[5,6],[7,8]]\nOutput: 4\nExplanation: One arrow needs to be shot for each balloon for a total of 4 arrows.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: points = [[1,2],[2,3],[3,4],[4,5]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= points.length <= 10^5")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"points[i].length == 2")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-2^31 <= xstart < xend <= 2^31 - 1"))),(0,a.kt)("h2",{id:"approach-1-greedy"},"Approach 1: Greedy"),(0,a.kt)("p",null,"The answer is at least 1. First we sort the balloons by the end coordinate. Set the first end coordinate as ",(0,a.kt)("inlineCode",{parentName:"p"},"cur_r"),". Iterate over all balloons to check if the balloon starts after ",(0,a.kt)("inlineCode",{parentName:"p"},"cur_r"),". If so, increase answer by 1 and set ",(0,a.kt)("inlineCode",{parentName:"p"},"cur_r = r"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findMinArrowShots(vector<vector<int>>& points) {\n        sort(points.begin(), points.end(), [&](const vector<int>& x, const vector<int>& y) {\n            return x[1] < y[1];  \n        });\n        int ans = 1, cur_r = points[0][1];\n        for (auto p : points) {\n            int l = p[0], r = p[1];\n            if (cur_r < l) ans++, cur_r = r;\n        }\n        return ans;\n    }\n};\n")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[932],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56817:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=n(8539),l=["components"],s={description:"Author: @wingkwong | https://leetcode.com/problems/subarrays-with-k-different-integers/"},u="0992 - Subarrays with K Different Integers (Hard)",p={unversionedId:"0900-0999/subarrays-with-k-different-integers-hard",id:"0900-0999/subarrays-with-k-different-integers-hard",title:"0992 - Subarrays with K Different Integers (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/subarrays-with-k-different-integers/",source:"@site/solutions/0900-0999/0992-subarrays-with-k-different-integers-hard.md",sourceDirName:"0900-0999",slug:"/0900-0999/subarrays-with-k-different-integers-hard",permalink:"/leetcode-the-hard-way/solutions/0900-0999/subarrays-with-k-different-integers-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0900-0999/0992-subarrays-with-k-different-integers-hard.md",tags:[],version:"current",sidebarPosition:992,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/subarrays-with-k-different-integers/"},sidebar:"tutorialSidebar",previous:{title:"0991 - Broken Calculator (Medium)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/broken-calculator-medium"},next:{title:"0923 - 3Sum With Multiplicity (Medium)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/0923-3sum-with-multiplicity-medium"}},c={},m=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Sliding Window",id:"approach-1-sliding-window",level:2}],d={toc:m};function f(e){var t=e.components,n=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0992---subarrays-with-k-different-integers-hard"},"0992 - Subarrays with K Different Integers (Hard)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/subarrays-with-k-different-integers/"},"https://leetcode.com/problems/subarrays-with-k-different-integers/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given an integer array ",(0,a.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,a.kt)("em",{parentName:"p"},"the number of ",(0,a.kt)("strong",{parentName:"em"},"good subarrays")," of")," ",(0,a.kt)("inlineCode",{parentName:"p"},"nums"),"."),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"good array")," is an array where the number of different integers in that array is exactly ",(0,a.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For example, ",(0,a.kt)("inlineCode",{parentName:"li"},"[1,2,3,1,2]")," has ",(0,a.kt)("inlineCode",{parentName:"li"},"3")," different integers: ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"3"),".")),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"subarray")," is a ",(0,a.kt)("strong",{parentName:"p"},"contiguous")," part of an array."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,2,1,2,3], k = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: nums = [1,2,1,3,4], k = 3\nOutput: 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums.length <= 2 * 10^4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= nums[i], k <= nums.length"))),(0,a.kt)("h2",{id:"approach-1-sliding-window"},"Approach 1: Sliding Window"),(0,a.kt)(o.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    // sliding window\n    int go(vector<int>& nums, int k) {\n        // count the frequency for each number\n        unordered_map<int, int> cnt;\n        int l = 0, res = 0;\n        for (int r = 0; r < nums.size(); r++) {\n            // if nums[r] doesn't exist, we subtract k by 1\n            // update cnt[nums[r]]\n            if (!cnt[nums[r]]++) k -= 1;\n            // while k < 0, we need to pop the leftmost element out\n            // if we remove nums[l] and its frequency is 0\n            // then we can include other integer so we increase k by 1\n            while (k < 0) {\n                if (!--cnt[nums[l]]) k += 1;\n                l++;\n            }\n            // add the current range to ans\n            res += r - l + 1;\n        }\n        return res;\n    }\n    \n    int subarraysWithKDistinct(vector<int>& nums, int k) {\n        // exactly k differences = \n        // at most k differences - at most k - 1 differences\n        return go(nums, k) - go(nums, k - 1);\n    }\n};\n")))}f.isMDXComponent=!0},8539:function(e,t,n){n.d(t,{Z:function(){return i}});var r=n(67294);function i(e){var t=e.name;return r.createElement("div",{className:"solution-author-wrapper"},r.createElement("span",null,"This solution is written by ",t))}}}]);
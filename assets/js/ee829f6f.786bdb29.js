"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[7911],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},59361:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return c}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],u={description:"Author: @wingkwong | https://leetcode.com/problems/divide-array-into-equal-pairs/"},l="2206 - Divide Array Into Equal Pairs (Easy)",s={unversionedId:"2100-2199/divide-array-into-equal-pairs-easy",id:"2100-2199/divide-array-into-equal-pairs-easy",title:"2206 - Divide Array Into Equal Pairs (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/divide-array-into-equal-pairs/",source:"@site/solutions/2100-2199/2206-divide-array-into-equal-pairs-easy.md",sourceDirName:"2100-2199",slug:"/2100-2199/divide-array-into-equal-pairs-easy",permalink:"/leetcode-the-hard-way/solutions/2100-2199/divide-array-into-equal-pairs-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/2100-2199/2206-divide-array-into-equal-pairs-easy.md",tags:[],version:"current",sidebarPosition:2206,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/divide-array-into-equal-pairs/"},sidebar:"tutorialSidebar",previous:{title:"2203 - Minimum Weighted Subgraph With the Required Paths (Hard)",permalink:"/leetcode-the-hard-way/solutions/2100-2199/minimum-weighted-subgraph-with-the-required-paths-hard"},next:{title:"2207 - Maximize Number of Subsequences in a String (Medium)",permalink:"/leetcode-the-hard-way/solutions/2100-2199/maximize-number-of-subsequences-in-a-string-medium"}},p={},c=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2}],d={toc:c};function m(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2206---divide-array-into-equal-pairs-easy"},"2206 - Divide Array Into Equal Pairs (Easy)"),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given an integer array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," consisting of ",(0,i.kt)("inlineCode",{parentName:"p"},"2 * n")," integers."),(0,i.kt)("p",null,"You need to divide ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," pairs such that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each element belongs to ",(0,i.kt)("strong",{parentName:"li"},"exactly one")," pair."),(0,i.kt)("li",{parentName:"ul"},"The elements present in a pair are ",(0,i.kt)("strong",{parentName:"li"},"equal"),".")),(0,i.kt)("p",null,"Return ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," ",(0,i.kt)("em",{parentName:"p"},"if nums can be divided into")," ",(0,i.kt)("inlineCode",{parentName:"p"},"n")," ",(0,i.kt)("em",{parentName:"p"},"pairs, otherwise return")," ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("h2",{id:"approach-1-brute-force"},"Approach 1: Brute Force"),(0,i.kt)("p",null,"Count the frequency for each number. If there is a number with odd frequency, then the answer is false. Otherwise, it must be true."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool divideArray(vector<int>& nums) {\n        int n = nums.size(), cnt = 0;\n        unordered_map<int, int> m;\n        // count the frequency for each number\n        for (auto x : nums) m[x]++;\n        for (auto x : m) {\n            // check if it is odd\n            if (x.second & 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n")))}m.isMDXComponent=!0}}]);
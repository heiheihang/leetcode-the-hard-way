"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[6992],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},14324:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return m}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/stamping-the-sequence/"},l="0936 - Stamping The Sequence (Hard)",s={unversionedId:"0900-0999/stamping-the-sequence-hard",id:"0900-0999/stamping-the-sequence-hard",title:"0936 - Stamping The Sequence (Hard)",description:"Author: @wingkwong | https://leetcode.com/problems/stamping-the-sequence/",source:"@site/solutions/0900-0999/0936-stamping-the-sequence-hard.md",sourceDirName:"0900-0999",slug:"/0900-0999/stamping-the-sequence-hard",permalink:"/leetcode-the-hard-way/solutions/0900-0999/stamping-the-sequence-hard",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0900-0999/0936-stamping-the-sequence-hard.md",tags:[],version:"current",sidebarPosition:936,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/stamping-the-sequence/"},sidebar:"tutorialSidebar",previous:{title:"0921 - Sort an Array (Medium)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/sort-an-array-medium"},next:{title:"0941 - Valid Mountain Array (Easy)",permalink:"/leetcode-the-hard-way/solutions/0900-0999/valid-mountain-array-easy"}},c={},m=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Greedy",id:"approach-1-greedy",level:2}],u={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0936---stamping-the-sequence-hard"},"0936 - Stamping The Sequence (Hard)"),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"stamp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"target"),". Initially, there is a string ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," of length ",(0,i.kt)("inlineCode",{parentName:"p"},"target.length")," with all ",(0,i.kt)("inlineCode",{parentName:"p"},"s[i] == '?'"),"."),(0,i.kt)("p",null,"In one turn, you can place ",(0,i.kt)("inlineCode",{parentName:"p"},"stamp")," over ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," and replace every letter in the ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," with the corresponding letter from ",(0,i.kt)("inlineCode",{parentName:"p"},"stamp"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For example, if ",(0,i.kt)("inlineCode",{parentName:"p"},'stamp = "abc"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'target = "abcba"'),", then ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," is ",(0,i.kt)("inlineCode",{parentName:"p"},'"?????"')," initially. In one turn you can:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"place ",(0,i.kt)("inlineCode",{parentName:"li"},"stamp")," at index ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," to obtain ",(0,i.kt)("inlineCode",{parentName:"li"},'"abc??"'),","),(0,i.kt)("li",{parentName:"ul"},"place ",(0,i.kt)("inlineCode",{parentName:"li"},"stamp")," at index ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," to obtain ",(0,i.kt)("inlineCode",{parentName:"li"},'"?abc?"'),", or"),(0,i.kt)("li",{parentName:"ul"},"place ",(0,i.kt)("inlineCode",{parentName:"li"},"stamp")," at index ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," to obtain ",(0,i.kt)("inlineCode",{parentName:"li"},'"??abc"'),".")),(0,i.kt)("p",{parentName:"li"},"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"stamp")," must be fully contained in the boundaries of ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," in order to stamp (i.e., you cannot place ",(0,i.kt)("inlineCode",{parentName:"p"},"stamp")," at index ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"s"),")."))),(0,i.kt)("p",null,"We want to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"target")," using ",(0,i.kt)("strong",{parentName:"p"},"at most")," ",(0,i.kt)("inlineCode",{parentName:"p"},"10 * target.length")," turns."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"an array of the index of the left-most letter being stamped at each turn"),". If we cannot obtain ",(0,i.kt)("inlineCode",{parentName:"p"},"target")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," within ",(0,i.kt)("inlineCode",{parentName:"p"},"10 * target.length")," turns, return an empty array."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: stamp = "abc", target = "ababc"\nOutput: [0,2]\nExplanation: Initially s = "?????".\n- Place stamp at index 0 to get "abc??".\n- Place stamp at index 2 to get "ababc".\n[1,0,2] would also be accepted as an answer, as well as some other answers.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: stamp = "abca", target = "aabcaca"\nOutput: [3,0,1]\nExplanation: Initially s = "???????".\n- Place stamp at index 3 to get "???abca".\n- Place stamp at index 0 to get "abcabca".\n- Place stamp at index 1 to get "aabcaca".\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= stamp.length <= target.length <= 1000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stamp")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"target")," consist of lowercase English letters.")),(0,i.kt)("h2",{id:"approach-1-greedy"},"Approach 1: Greedy"),(0,i.kt)("p",null,"We first try the first stamp and mark those characters to",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mo",{parentName:"mrow"},"\u2217")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"*")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4653em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"\u2217"))))),". Then build some new stamps to check if they exist in target, if so mark them and repeat the process until all characters are stamped."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> movesToStamp(string stamp, string target) {\n        int n = stamp.size(), total = 0, k = -1;\n        vector<int> ans;\n        // \"abca\"\n        // \"aabcaca\"\n        while (k) {\n            k = 0;\n            for (int j = n; j > 0; j--) {\n                for (int i = 0; i <= n - j; i++) {\n                    // build the new stamp\n                    string new_stamp = string(i, '*') + stamp.substr(i, j) + string(n - j - i, '*');\n                    // abca\n                    // abc*\n                    // *bca\n                    // ab**\n                    // *bc*\n                    // **ca\n                    // a***\n                    // *b**\n                    // **c*\n                    // ***a\n                    \n                    // check if we can use this new_stamp to cover some characters\n                    auto p = target.find(new_stamp);\n                    while (p != string::npos) {\n                        // if so, mark this position\n                        ans.push_back(p);\n                        // and replace those characters\n                        // e.g.\n                        // aabcaca\n                        // a****ca\n                        // a****ca\n                        // a******\n                        // a******\n                        // *******\n                        fill(target.begin() + p, target.begin() + p + n, '*');\n                        // try to find if we can cover another set\n                        p = target.find(new_stamp);\n                        // j is how many characters we've covered\n                        k += j;\n                    }\n                }\n            }\n            // update the total covered characters\n            total += k;\n        }\n        reverse(ans.begin(), ans.end());\n        return total == target.size() ? ans : vector<int>{};\n    }\n};\n")))}d.isMDXComponent=!0}}]);
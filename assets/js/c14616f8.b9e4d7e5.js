"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[7612],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return h}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),i=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=i(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=i(t),h=a,d=c["".concat(u,".").concat(h)]||c[h]||p[h]||o;return t?r.createElement(d,l(l({ref:n},m),{},{components:t})):r.createElement(d,l({ref:n},m))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=c;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=t[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},88338:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return c}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),l=t(8539),s=["components"],u={description:"Author: @wingkwong | https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/"},i="1365 - How Many Numbers Are Smaller Than the Current Number (Easy)",m={unversionedId:"1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy",id:"1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy",title:"1365 - How Many Numbers Are Smaller Than the Current Number (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/",source:"@site/solutions/1300-1399/1365-how-many-numbers-are-smaller-than-the-current-number-easy.md",sourceDirName:"1300-1399",slug:"/1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy",permalink:"/leetcode-the-hard-way/solutions/1300-1399/how-many-numbers-are-smaller-than-the-current-number-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/1300-1399/1365-how-many-numbers-are-smaller-than-the-current-number-easy.md",tags:[],version:"current",sidebarPosition:1365,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/"},sidebar:"tutorialSidebar",previous:{title:"1359 - Count All Valid Pickup and Delivery Options (Hard)",permalink:"/leetcode-the-hard-way/solutions/1300-1399/count-all-valid-pickup-and-delivery-options-hard"},next:{title:"1371 - Find the Longest Substring Containing Vowels in Even Counts (Medium)",permalink:"/leetcode-the-hard-way/solutions/1300-1399/find-the-longest-substring-containing-vowels-in-even-counts-medium"}},p={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Brute Force",id:"approach-1-brute-force",level:2},{value:"Approach 2: Sorting",id:"approach-2-sorting",level:2},{value:"Approach 3: Sorting + Lower Bound",id:"approach-3-sorting--lower-bound",level:2}],h={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1365---how-many-numbers-are-smaller-than-the-current-number-easy"},"1365 - How Many Numbers Are Smaller Than the Current Number (Easy)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/"},"https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"Given the array ",(0,o.kt)("inlineCode",{parentName:"p"},"nums"),", for each ",(0,o.kt)("inlineCode",{parentName:"p"},"nums[i]")," find out how many numbers in the array are smaller than it. That is, for each ",(0,o.kt)("inlineCode",{parentName:"p"},"nums[i]")," you have to count the number of valid ",(0,o.kt)("inlineCode",{parentName:"p"},"j's")," such that ",(0,o.kt)("inlineCode",{parentName:"p"},"j != i")," ",(0,o.kt)("strong",{parentName:"p"},"and")," ",(0,o.kt)("inlineCode",{parentName:"p"},"nums[j] < nums[i]"),"."),(0,o.kt)("p",null,"Return the answer in an array."," "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation: \nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1). \nFor nums[3]=2 there exist one smaller number than it (1). \nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [6,5,4,8]\nOutput: [2,1,0,3]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 3:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: nums = [7,7,7,7]\nOutput: [0,0,0,0]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"2 <= nums.length <= 500")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= nums[i] <= 100"))),(0,o.kt)("h2",{id:"approach-1-brute-force"},"Approach 1: Brute Force"),(0,o.kt)(l.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        int n = (int) nums.size();\n        vector<int> ans;\n        // iterate each element\n        for(int i = 0; i < n; i++){\n            // init a var called smaller\n            int smaller = 0;\n            // iterate each element\n            for(int j = 0; j < n; j++){\n                // if they are equal, skip it\n                if(i == j) continue;\n                // if nums[j] is smaller, increase the counter\n                if(nums[j] < nums[i]) smaller++;\n            }\n            // push the result to ans\n            ans.push_back(smaller);\n        }\n        return ans;\n    }\n};\n")),(0,o.kt)("h2",{id:"approach-2-sorting"},"Approach 2: Sorting"),(0,o.kt)(l.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        vector<int> sorted_nums { nums }, ans;\n        sort(sorted_nums.begin(), sorted_nums.end());\n        // nums: 8 1 2 2 3\n        // sorted_nums: 1 2 2 3 8\n        \n        // iterate each element in nums\n        // since we need the original order in ans\n        for (auto& x : nums) {\n            // init a var called smaller\n            int smaller = 0;\n            // walk thru sorted_nums\n            for (auto& y : sorted_nums) {\n                // if they are not equal, it means y is smaller than x\n                if (x != y) {\n                    smaller += 1;\n                } else {\n                    // otherwise, we got all elements smaller than x\n                    // so break it here\n                    break;\n                }\n            }\n            // push the result to ans\n            ans.push_back(smaller);\n        }\n        return ans;\n    }\n};\n")),(0,o.kt)("h2",{id:"approach-3-sorting--lower-bound"},"Approach 3: Sorting + Lower Bound"),(0,o.kt)(l.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'class Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        vector<int> sorted_nums { nums }, ans;\n        sort(sorted_nums.begin(), sorted_nums.end());\n        // nums: 8 1 2 2 3\n        // sorted_nums: 1 2 2 3 8\n        for (auto& x : nums) {\n            // we can use lower_bound to calculate the smaller \n            // lower_bound: returns an iterator pointing to the first element in the range [first,last) \n            // which does not compare less than val\n            // since it is a iterator, we need to add "- sorted_nums.begin()" to get the number of elements.\n            ans.push_back(\n                lower_bound(sorted_nums.begin(), sorted_nums.end(), x) \n                            - sorted_nums.begin()\n            );\n        }\n        return ans;\n    }\n};\n')))}d.isMDXComponent=!0},8539:function(e,n,t){t.d(n,{Z:function(){return a}});var r=t(67294);function a(e){var n=e.name;return r.createElement("div",{className:"solution-author-wrapper"},r.createElement("span",null,"This solution is written by ",n))}}}]);
"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[6038],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return s}});var i=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,i,a=function(t,e){if(null==t)return{};var n,i,a={},r=Object.keys(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var m=i.createContext({}),u=function(t){var e=i.useContext(m),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=u(t.components);return i.createElement(m.Provider,{value:e},t.children)},l={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},d=i.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,m=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),d=u(n),s=a,b=d["".concat(m,".").concat(s)]||d[s]||l[s]||r;return n?i.createElement(b,o(o({ref:e},p),{},{components:n})):i.createElement(b,o({ref:e},p))}));function s(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,o=new Array(r);o[0]=d;var c={};for(var m in e)hasOwnProperty.call(e,m)&&(c[m]=e[m]);c.originalType=t,c.mdxType="string"==typeof t?t:a,o[1]=c;for(var u=2;u<r;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7253:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return m},default:function(){return s},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return l}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],c={description:"Author: @wingkwong | https://leetcode.com/problems/combination-sum-ii/"},m="0040 - Combination Sum II (Medium)",u={unversionedId:"0000-0099/combination-sum-ii-medium",id:"0000-0099/combination-sum-ii-medium",title:"0040 - Combination Sum II (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/combination-sum-ii/",source:"@site/solutions/0000-0099/0040-combination-sum-ii-medium.md",sourceDirName:"0000-0099",slug:"/0000-0099/combination-sum-ii-medium",permalink:"/leetcode-the-hard-way/solutions/0000-0099/combination-sum-ii-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0000-0099/0040-combination-sum-ii-medium.md",tags:[],version:"current",lastUpdatedBy:"Wing-Kam Wong",lastUpdatedAt:1652613881,formattedLastUpdatedAt:"5/15/2022",sidebarPosition:40,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/combination-sum-ii/"},sidebar:"tutorialSidebar",previous:{title:"0039 - Combination Sum (Medium)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/combination-sum-medium"},next:{title:"0046 - Permutations (Medium)",permalink:"/leetcode-the-hard-way/solutions/0000-0099/permutations-medium"}},p={},l=[{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Backtracking",id:"approach-1-backtracking",level:2}],d={toc:l};function s(t){var e=t.components,n=(0,a.Z)(t,o);return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0040---combination-sum-ii-medium"},"0040 - Combination Sum II (Medium)"),(0,r.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,r.kt)("p",null,"Given a collection of candidate numbers (",(0,r.kt)("inlineCode",{parentName:"p"},"candidates"),") and a target number (",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"), find all unique combinations in ",(0,r.kt)("inlineCode",{parentName:"p"},"candidates")," where the candidate numbers sum to ",(0,r.kt)("inlineCode",{parentName:"p"},"target"),"."),(0,r.kt)("p",null,"Each number in ",(0,r.kt)("inlineCode",{parentName:"p"},"candidates")," may only be used ",(0,r.kt)("strong",{parentName:"p"},"once")," in the combination."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," The solution set must not contain duplicate combinations."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Input: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Constraints:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= candidates.length <= 100")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= candidates[i] <= 50")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1 <= target <= 30"))),(0,r.kt)("h2",{id:"approach-1-backtracking"},"Approach 1: Backtracking"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("a",{parentName:"p",href:"combination-sum-medium"},"0039 - Combination Sum (Medium)"),", the only difference is each number can be used once in the combination. To avoid overcounting, we can simply add ",(0,r.kt)("inlineCode",{parentName:"p"},"i != start && candidates[i] == candidates[i - 1].")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    void backtrack(vector<int>& candidates, int target, vector<vector<int>>& ans, vector<int>& tmp, int start) {\n        if(target == 0) {\n            ans.push_back(tmp);\n            return;\n        }\n        for(int i = start; i < candidates.size() && target >= candidates[i]; i++){\n            if(i != start && candidates[i] == candidates[i - 1]) continue;\n            tmp.push_back(candidates[i]);\n            backtrack(candidates, target - candidates[i], ans, tmp, i + 1);\n            tmp.pop_back();\n        }\n    }\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n        sort(candidates.begin(), candidates.end());\n        vector<vector<int>> ans;\n        vector<int> tmp;\n        backtrack(candidates, target, ans, tmp, 0);\n        return ans;\n    }\n};\n")))}s.isMDXComponent=!0}}]);
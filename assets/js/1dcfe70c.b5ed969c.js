"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[2269],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},38542:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=n(92194),s=["components"],l={description:"Author: @wingkwong | https://leetcode.com/problems/first-bad-version/"},u="0278 - First Bad Version (Easy)",p={unversionedId:"0200-0299/first-bad-version-easy",id:"0200-0299/first-bad-version-easy",title:"0278 - First Bad Version (Easy)",description:"Author: @wingkwong | https://leetcode.com/problems/first-bad-version/",source:"@site/solutions/0200-0299/0278-first-bad-version-easy.md",sourceDirName:"0200-0299",slug:"/0200-0299/first-bad-version-easy",permalink:"/leetcode-the-hard-way/solutions/0200-0299/first-bad-version-easy",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0200-0299/0278-first-bad-version-easy.md",tags:[],version:"current",sidebarPosition:278,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/first-bad-version/"},sidebar:"tutorialSidebar",previous:{title:"0268 - Missing Number (Easy)",permalink:"/leetcode-the-hard-way/solutions/0200-0299/missing-number-easy"},next:{title:"0283 - Move Zeroes (Easy)",permalink:"/leetcode-the-hard-way/solutions/0200-0299/move-zeroes-easy"}},c={},d=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Binary Search",id:"approach-1-binary-search",level:2}],m={toc:d};function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"0278---first-bad-version-easy"},"0278 - First Bad Version (Easy)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/first-bad-version/"},"https://leetcode.com/problems/first-bad-version/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad."),(0,a.kt)("p",null,"Suppose you have ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," versions ",(0,a.kt)("inlineCode",{parentName:"p"},"[1, 2, ..., n]")," and you want to find out the first bad one, which causes all the following ones to be bad."),(0,a.kt)("p",null,"You are given an API ",(0,a.kt)("inlineCode",{parentName:"p"},"bool isBadVersion(version)")," which returns whether ",(0,a.kt)("inlineCode",{parentName:"p"},"version")," is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\nThen 4 is the first bad version.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 1, bad = 1\nOutput: 1\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= bad <= n <= 2^31 - 1"))),(0,a.kt)("h2",{id:"approach-1-binary-search"},"Approach 1: Binary Search"),(0,a.kt)("p",null,"Prerequisite: ",(0,a.kt)("a",{parentName:"p",href:"../../tutorials/basic-topics/binary-search"},"Binary Search")),(0,a.kt)(i.Z,{names:"@wingkwong",mdxType:"Authors"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// The API isBadVersion is defined for you.\n// bool isBadVersion(int version);\n\nclass Solution {\npublic:\n    int firstBadVersion(int n) {\n        // init possible range\n        int l = 1, r = n;\n        while (l < r) {\n            int m = l + (r - l) / 2;\n            // [F,F,..,F,T,T,T,..,T]\n            // exclude m\n            if (!isBadVersion(m)) l = m + 1;\n            // include m\n            else r = m;\n        }\n        return l;\n    }\n};\n")))}f.isMDXComponent=!0},92194:function(e,t,n){n.d(t,{Z:function(){return o}});var r=n(67294);function o(e){var t=e.names.split(",");return r.createElement("div",{className:"author-wrapper"},t.length>1?"Authors":"Author",":",t.map((function(e,t){return r.createElement("span",{key:t,className:"author-tag"},e)})))}}}]);
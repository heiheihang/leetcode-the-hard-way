"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[5675],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function h(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=h(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,u=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return r?n.createElement(u,i(i({ref:t},s),{},{components:r})):n.createElement(u,i({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=c;var h={};for(var l in t)hasOwnProperty.call(t,l)&&(h[l]=t[l]);h.originalType=e,h.mdxType="string"==typeof e?e:a,i[1]=h;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},3139:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return h},metadata:function(){return p},toc:function(){return d}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],h={description:"Author: @heiheihang"},l="Depth First Search",p={unversionedId:"graph-theory/depth-first-search",id:"graph-theory/depth-first-search",title:"Depth First Search",description:"Author: @heiheihang",source:"@site/tutorials/graph-theory/depth-first-search.md",sourceDirName:"graph-theory",slug:"/graph-theory/depth-first-search",permalink:"/leetcode-the-hard-way/tutorials/graph-theory/depth-first-search",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tutorials/graph-theory/depth-first-search.md",tags:[],version:"current",lastUpdatedBy:"Wing-Kam Wong",lastUpdatedAt:1652613881,formattedLastUpdatedAt:"5/15/2022",frontMatter:{description:"Author: @heiheihang"},sidebar:"tutorialSidebar",previous:{title:"Breadth First Search",permalink:"/leetcode-the-hard-way/tutorials/graph-theory/breadth-first-search"},next:{title:"Dijkstra's Algorithm",permalink:"/leetcode-the-hard-way/tutorials/graph-theory/dijkstra"}},s={},d=[],c={toc:d};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"depth-first-search"},"Depth First Search"),(0,o.kt)("p",null,"In Depth-First Search (DFS), we aim to finish one branch before looking at other branches."),(0,o.kt)("p",null,"A good example of DFS is the following problem (",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/"},"LeetCode Link"),"):"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Given the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, return ",(0,o.kt)("em",{parentName:"p"},"its maximum depth"),"."),(0,o.kt)("p",{parentName:"blockquote"},"A binary tree's ",(0,o.kt)("strong",{parentName:"p"},"maximum depth")," is the number of nodes along the longest path from the root node down to the farthest leaf node.")),(0,o.kt)("p",null,"We want to know how ",(0,o.kt)("strong",{parentName:"p"},"far")," we can travel from the root, so we try one path at a time. (Of course, this problem can be solved by Breadth-First-Search , but DFS is more intuitive)"),(0,o.kt)("p",null,"DFS can be implemented in the following way"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def dfs(node):\n    if(node == None):\n        # we stop when node is invalid\n        return\n        \n    # explore left branch first\n    dfs(node.left)\n    \n    # evalute current node\n    print("I just visited the left branch!")\n    print("I am number: " + str(node.val))\n    print("I am visiting the right branch now!")\n    \n    # explore right branch\n    dfs(node.right)\n')),(0,o.kt)("p",null,"With this template of DFS, we can modify the function above to obtain the depth of each branch"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def findMaximumDepth(root):\n\n    def dfs(node):\n        if(node == None):\n            # we stop when node is invalid\n            return 0\n            \n        # explore left branch first\n        left_branch_depth = dfs(node.left)\n        \n        print("I just visited the left branch!")\n        print("I am visiting the right branch now!")\n        \n        # explore right branch\n        right_branch_depth = dfs(node.right)\n        \n        # return the larger depth of the two branches\n        return max(left_branch_depth, right_branch_depth) + 1\n    \n    return dfs(root)\n')),(0,o.kt)("p",null,"There we go! This is a simple DFS problem. We are going to work through a few more DFS problems together."),(0,o.kt)("p",null,"Let's look at another problem (",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/diameter-of-binary-tree/"},"LeetCode Link"),")"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Given the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, return ",(0,o.kt)("em",{parentName:"p"},"the length of the ",(0,o.kt)("strong",{parentName:"em"},"diameter")," of the tree"),"."),(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("strong",{parentName:"p"},"diameter")," of a binary tree is the ",(0,o.kt)("strong",{parentName:"p"},"length")," of the longest path between any two nodes in a tree. This path may or may not pass through the ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),"."),(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("strong",{parentName:"p"},"length")," of a path between two nodes is represented by the number of edges between them.")),(0,o.kt)("p",null,"This problem may seem difficult at first glance. However it is just a minor tweak from the previous problem. The longest path between two nodes would be the sum of the maximum depth of the left branch and that of the right branch. Modify the code above before you look at the solution below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def findTreeDiameter(root):\n    diameter = 0\n\n    def dfs(node):\n        if(node == None):\n            # we stop when node is invalid\n            return 0\n            \n        # explore left branch first\n        left_branch_depth = dfs(node.left)\n        \n        print("I just visited the left branch!")\n        print("I am visiting the right branch now!")\n        \n        # explore right branch\n        right_branch_depth = dfs(node.right)\n        \n        #the longest path at the current node is the maximum depth of left and right\n        local_diameter = left_brach_depth + right_branch_depth + 1\n        \n        #update the global variable\n        nonlocal diameter\n        diameter = max(diameter, local_diameter)\n        \n        # return the larger depth of the two branches\n        return max(left_branch_depth, right_branch_depth) + 1\n    \n    dfs(root)\n    \n    return diameter\n')),(0,o.kt)("p",null,"Here are some similar problems in which you can tweak the template above to obtain a solution:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Sum of Left Leaves (",(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/sum-of-left-leaves/"},"LeetCode Link"),") (Guide)"),(0,o.kt)("li",{parentName:"ul"},"Balanced Binary Tree (",(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/balanced-binary-tree/"},"LeetCode Link"),") (Guide)"),(0,o.kt)("li",{parentName:"ul"},"Maximum Depth of N-ary Tree (",(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/maximum-depth-of-n-ary-tree/"},"LeetCode Link"),") (Guide)")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[9613],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),k=a,h=c["".concat(p,".").concat(k)]||c[k]||u[k]||i;return n?r.createElement(h,o(o({ref:t},m),{},{components:n})):r.createElement(h,o({ref:t},m))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},17449:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return c}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=n(8539),l=["components"],p={description:"Author: @wingkwong | https://leetcode.com/problems/kth-largest-element-in-an-array/",tags:["Priority Queue"]},s="0215 - Kth Largest Element in an Array (Medium)",m={unversionedId:"0200-0299/kth-largest-element-in-an-array-medium",id:"0200-0299/kth-largest-element-in-an-array-medium",title:"0215 - Kth Largest Element in an Array (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/kth-largest-element-in-an-array/",source:"@site/solutions/0200-0299/0215-kth-largest-element-in-an-array-medium.md",sourceDirName:"0200-0299",slug:"/0200-0299/kth-largest-element-in-an-array-medium",permalink:"/leetcode-the-hard-way/solutions/0200-0299/kth-largest-element-in-an-array-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/0200-0299/0215-kth-largest-element-in-an-array-medium.md",tags:[{label:"Priority Queue",permalink:"/leetcode-the-hard-way/solutions/tags/priority-queue"}],version:"current",sidebarPosition:215,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/kth-largest-element-in-an-array/",tags:["Priority Queue"]},sidebar:"tutorialSidebar",previous:{title:"0214 - Shortest Palindrome (Hard)",permalink:"/leetcode-the-hard-way/solutions/0200-0299/shortest-palindrome-hard"},next:{title:"0217 - Contains Duplicate (Easy)",permalink:"/leetcode-the-hard-way/solutions/0200-0299/contains-duplicate-easy"}},u={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Priority Queue",id:"approach-1-priority-queue",level:2},{value:"Approach 2: STL",id:"approach-2-stl",level:2}],k={toc:c};function h(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"0215---kth-largest-element-in-an-array-medium"},"0215 - Kth Largest Element in an Array (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/kth-largest-element-in-an-array/"},"https://leetcode.com/problems/kth-largest-element-in-an-array/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"Given an integer array ",(0,i.kt)("inlineCode",{parentName:"p"},"nums")," and an integer ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),", return ",(0,i.kt)("em",{parentName:"p"},"the")," ",(0,i.kt)("inlineCode",{parentName:"p"},"kth")," ",(0,i.kt)("em",{parentName:"p"},"largest element in the array"),"."),(0,i.kt)("p",null,"Note that it is the ",(0,i.kt)("inlineCode",{parentName:"p"},"kth")," largest element in the sorted order, not the ",(0,i.kt)("inlineCode",{parentName:"p"},"kth")," distinct element."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= k <= nums.length <= 10^4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-10^4 <= nums[i] <= 10^4"))),(0,i.kt)("h2",{id:"approach-1-priority-queue"},"Approach 1: Priority Queue"),(0,i.kt)("p",null,"When we look for ",(0,i.kt)("inlineCode",{parentName:"p"},"k-th")," elements, we can think of Priority Queue as it internally sorts the container. We can check if the size exceeds ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mi",{parentName:"mrow"},"k")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"k")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"))))),". "),(0,i.kt)(o.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n        priority_queue<int> pq;\n        // push elements to priority queue\n        for (auto &x : nums) pq.push(x);\n        // only keep k largest elements\n        for (int i = 0; i < k - 1; i++) pq.pop();\n        // return the top which is the k-th largest element\n        return pq.top();\n    }\n};\n")),(0,i.kt)("h2",{id:"approach-2-stl"},"Approach 2: STL"),(0,i.kt)("p",null,"The following STL functions can partially sort to solve the problem."),(0,i.kt)(o.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n        partial_sort(nums.begin(), nums.begin() + k, nums.end(), greater<int>());\n        return nums[k - 1];\n    }\n};\n")),(0,i.kt)(o.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n        nth_element(nums.begin(), nums.begin() + k - 1, nums.end(), greater<int>());\n        return nums[k - 1];\n    }\n};\n")))}h.isMDXComponent=!0},8539:function(e,t,n){n.d(t,{Z:function(){return a}});var r=n(67294);function a(e){var t=e.name;return r.createElement("div",{className:"solution-author-wrapper"},r.createElement("span",null,"This solution is written by ",t))}}}]);
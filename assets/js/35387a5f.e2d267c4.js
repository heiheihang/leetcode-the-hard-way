"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[2762],{3905:function(n,t,e){e.d(t,{Zo:function(){return d},kt:function(){return g}});var i=e(7294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,i)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function s(n,t){if(null==n)return{};var e,i,r=function(n,t){if(null==n)return{};var e,i,r={},o=Object.keys(n);for(i=0;i<o.length;i++)e=o[i],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)e=o[i],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var l=i.createContext({}),c=function(n){var t=i.useContext(l),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},d=function(n){var t=c(n.components);return i.createElement(l.Provider,{value:t},n.children)},u={inlineCode:"code",wrapper:function(n){var t=n.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(n,t){var e=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,d=s(n,["components","mdxType","originalType","parentName"]),m=c(e),g=r,h=m["".concat(l,".").concat(g)]||m[g]||u[g]||o;return e?i.createElement(h,a(a({ref:t},d),{},{components:e})):i.createElement(h,a({ref:t},d))}));function g(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var o=e.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=n,s.mdxType="string"==typeof n?n:r,a[1]=s;for(var c=2;c<o;c++)a[c]=e[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,e)}m.displayName="MDXCreateElement"},1850:function(n,t,e){e.r(t),e.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var i=e(7462),r=e(3366),o=(e(7294),e(3905)),a=["components"],s={description:"Author: @wingkwong"},l="Manacher's Algorithm",c={unversionedId:"strings/manachers-algorithm",id:"strings/manachers-algorithm",title:"Manacher's Algorithm",description:"Author: @wingkwong",source:"@site/tutorials/strings/manachers-algorithm.md",sourceDirName:"strings",slug:"/strings/manachers-algorithm",permalink:"/leetcode-the-hard-way/tutorials/strings/manachers-algorithm",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/tutorials/strings/manachers-algorithm.md",tags:[],version:"current",lastUpdatedBy:"Wing-Kam Wong",lastUpdatedAt:1652613881,formattedLastUpdatedAt:"5/15/2022",frontMatter:{description:"Author: @wingkwong"},sidebar:"tutorialSidebar",previous:{title:"Booth's Algorithm",permalink:"/leetcode-the-hard-way/tutorials/strings/booths-algorithm"},next:{title:"Z Algorithm",permalink:"/leetcode-the-hard-way/tutorials/strings/z-algorithm"}},d={},u=[{value:"<em>Tutorial: Coming Soon!</em>",id:"tutorial-coming-soon",level:4},{value:"Find the longest palindrome substring",id:"find-the-longest-palindrome-substring",level:4},{value:"Find numbers of palindromic substrings in the given string",id:"find-numbers-of-palindromic-substrings-in-the-given-string",level:4}],m={toc:u};function g(n){var t=n.components,e=(0,r.Z)(n,a);return(0,o.kt)("wrapper",(0,i.Z)({},m,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"manachers-algorithm"},"Manacher's Algorithm"),(0,o.kt)("h4",{id:"tutorial-coming-soon"},(0,o.kt)("em",{parentName:"h4"},"Tutorial: Coming Soon!")),(0,o.kt)("h4",{id:"find-the-longest-palindrome-substring"},"Find the longest palindrome substring"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"string manacher(string s) {\n  int n = (int)s.size();\n  // d1[i]: the number of palindromes accordingly with odd lengths with centers in the position i.\n  // d2[i]: the number of palindromes accordingly with even lengths with centers in the position i.\n  vector<int> d1(n), d2(n);\n  int l1 = 0, r1 = -1, l2 = 0, r2 = -1, mx_len = 0, start = 0;\n  for (int i = 0; i < n; i++) {\n    // ----------------------\n    // calculate d1[i]\n    // ----------------------\n    int k = (i > r1) ? 1 : min(d1[l1 + r1 - i], r1 - i + 1);\n    while (0 <= i - k && i + k < n && s[i - k] == s[i + k]) k++;\n    d1[i] = k--;\n    if (i + k > r1) l1 = i - k, r1 = i + k;\n    if (d1[i] * 2 > mx_len) start = i - k, mx_len = d1[i] * 2 - 1;\n    // ----------------------\n    // calculate d2[i]\n    // ----------------------\n    k = (i > r2) ? 0 : min(d2[l2 + r2 - i + 1], r2 - i + 1);\n    while (0 <= i - k - 1 && i + k < n && s[i - k - 1] == s[i + k]) k++;\n    d2[i] = k--;\n    if (i + k > r2) l2 = i - k - 1, r2 = i + k;\n    if (d2[i] * 2 > mx_len) start = i - k - 1, mx_len = d2[i] * 2;\n  }\n  // return the longest palindrome\n  return s.substr(start, mx_len);\n}\n")),(0,o.kt)("h4",{id:"find-numbers-of-palindromic-substrings-in-the-given-string"},"Find numbers of palindromic substrings in the given string"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int manacher(string s) {\n  int n = (int) s.size();\n  // d1[i]: the number of palindromes accordingly with odd lengths with centers in the position i.\n  // d2[i]: the number of palindromes accordingly with even lengths with centers in the position i. \n  vector<int> d1(n), d2(n);\n  int l1 = 0, r1 = -1, l2 = 0, r2 = -1, mx_len = 0, start = 0;\n  for (int i = 0; i < n; i++) {\n    // ----------------------\n    // calculate d1[i]\n    // ----------------------\n    int k = (i > r1) ? 1 : min(d1[l1 + r1 - i], r1 - i + 1);\n    while (0 <= i - k && i + k < n && s[i - k] == s[i + k]) k++;\n    d1[i] = k--;\n    if (i + k > r1) l1 = i - k, r1 = i + k;\n    if (d1[i] * 2 > mx_len) start = i - k, mx_len = d1[i] * 2 - 1;\n    // ----------------------\n    // calculate d2[i]\n    // ----------------------\n    k = (i > r2) ? 0 : min(d2[l2 + r2 - i + 1], r2 - i + 1);\n    while (0 <= i - k - 1 && i + k < n && s[i - k - 1] == s[i + k]) k++;\n    d2[i] = k--;\n    if (i + k > r2) l2 = i - k - 1, r2 = i + k;\n    if (d2[i] * 2 > mx_len) start = i - k - 1, mx_len = d2[i] * 2;\n  }\n  // count how many palindromic substrings in the given string\n  int cnt = 0;\n  for (int i = 0; i < n; i++) cnt += d1[i] + d2[i];\n  return cnt;\n}\n")))}g.isMDXComponent=!0}}]);
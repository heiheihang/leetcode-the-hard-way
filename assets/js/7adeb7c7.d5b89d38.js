"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[627],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),l=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,h=u["".concat(m,".").concat(d)]||u[d]||c[d]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85472:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return m},metadata:function(){return p},toc:function(){return u}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=n(8539),s=["components"],m={description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/"},l="2186 - Minimum Number of Steps to Make Two Strings Anagram II (Medium)",p={unversionedId:"2100-2199/minimum-number-of-steps-to-make-two-strings-anagram-ii-medium",id:"2100-2199/minimum-number-of-steps-to-make-two-strings-anagram-ii-medium",title:"2186 - Minimum Number of Steps to Make Two Strings Anagram II (Medium)",description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/",source:"@site/solutions/2100-2199/2186-minimum-number-of-steps-to-make-two-strings-anagram-ii-medium.md",sourceDirName:"2100-2199",slug:"/2100-2199/minimum-number-of-steps-to-make-two-strings-anagram-ii-medium",permalink:"/leetcode-the-hard-way/solutions/2100-2199/minimum-number-of-steps-to-make-two-strings-anagram-ii-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/2100-2199/2186-minimum-number-of-steps-to-make-two-strings-anagram-ii-medium.md",tags:[],version:"current",sidebarPosition:2186,frontMatter:{description:"Author: @heiheihang, @wingkwong | https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/"},sidebar:"tutorialSidebar",previous:{title:"2185 - Counting Words With a Given Prefix (Easy)",permalink:"/leetcode-the-hard-way/solutions/2100-2199/counting-words-with-a-given-prefix-easy"},next:{title:"2187 - Minimum Time to Complete Trips (Medium)",permalink:"/leetcode-the-hard-way/solutions/2100-2199/minimum-time-to-complete-trips-medium"}},c={},u=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: 2 Dictionaries",id:"approach-1-2-dictionaries",level:2},{value:"Approach 2: 1 Dictionary",id:"approach-2-1-dictionary",level:2}],d={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2186---minimum-number-of-steps-to-make-two-strings-anagram-ii-medium"},"2186 - Minimum Number of Steps to Make Two Strings Anagram II (Medium)"),(0,i.kt)("h2",{id:"problem-link"},"Problem Link"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/"},"https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/")),(0,i.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,i.kt)("p",null,"You are given two strings ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),". In one step, you can append ",(0,i.kt)("strong",{parentName:"p"},"any character")," to either ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"t"),"."),(0,i.kt)("p",null,"Return ",(0,i.kt)("em",{parentName:"p"},"the minimum number of steps to make")," ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," ",(0,i.kt)("em",{parentName:"p"},"and")," ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," ","_"," ",(0,i.kt)("strong",{parentName:"p"},"anagrams")," of each other.","_"),(0,i.kt)("p",null,"An ",(0,i.kt)("strong",{parentName:"p"},"anagram")," of a string is a string that contains the same characters with a different (or the same) ordering."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "leetcode", t = "coats"\nOutput: 7\nExplanation: \n- In 2 steps, we can append the letters in "as" onto s = "leetcode", forming s = "leetcodeas".\n- In 5 steps, we can append the letters in "leede" onto t = "coats", forming t = "coatsleede".\n"leetcodeas" and "coatsleede" are now anagrams of each other.\nWe used a total of 2 + 5 = 7 steps.\nIt can be shown that there is no way to make them anagrams of each other with less than 7 steps.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input: s = "night", t = "thing"\nOutput: 0\nExplanation: The given strings are already anagrams of each other. Thus, we do not need any further steps.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Constraints:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"1 <= s.length, t.length <= 2 * 10^5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"t")," consist of lowercase English letters.")),(0,i.kt)("h2",{id:"approach-1-2-dictionaries"},"Approach 1: 2 Dictionaries"),(0,i.kt)("p",null,"We can store the characters of both strings into two dictionaries, and we make the following observation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To make the number of any character ",(0,i.kt)("inlineCode",{parentName:"li"},"c")," equal in string ",(0,i.kt)("inlineCode",{parentName:"li"},"s")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"t"),", we must add the difference between ",(0,i.kt)("inlineCode",{parentName:"li"},"s.count(c)")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"t.count(c)"))),(0,i.kt)("p",null,"In python ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultdict"),", if we simply perform ",(0,i.kt)("inlineCode",{parentName:"p"},"for key in d1")," , we will miss out the ",(0,i.kt)("inlineCode",{parentName:"p"},"keys")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"d2"),". If we iterate both dictionaries, we will need to cancel out double counts."),(0,i.kt)("p",null,"Hence, The simplest way is to visit each character once (by iterating from 0 to 25) and find the differences of characters between 2 dicts."),(0,i.kt)(o.Z,{name:"@heiheihang",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def minSteps(self, s: str, t: str) -> int:\n\n    # initialize the dictionaries\n    d1 = defaultdict(int)\n    d2 = defaultdict(int)\n\n    # count the number of characters in each string\n    for c in s:\n        d1[c] += 1\n\n    for c in t:\n        d2[c] += 1\n\n    # initialize result\n    res = 0\n\n    # iterate all 26 lowercase characters\n    for i in range(26):\n        # generate the character from i\n        c = chr(ord('a') + i)\n\n        # add the difference of character count to result\n        res += abs(d1[c] - d2[c])\n\n    return res\n\n")),(0,i.kt)("h2",{id:"approach-2-1-dictionary"},"Approach 2: 1 Dictionary"),(0,i.kt)("p",null,"We can actually use 1 dictionary with less code. The main idea is that we are only concerned with the ",(0,i.kt)("strong",{parentName:"p"},"difference")," of each characters in both strings, so we can simply take the count of character of ",(0,i.kt)("inlineCode",{parentName:"p"},"s")," as positive and that of ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," as negative."),(0,i.kt)(o.Z,{name:"@heiheihang",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def minSteps(self, s: str, t: str) -> int:\n\n    # initialize the dictionary\n    d = defaultdict(int)\n\n    # count c in s as positive\n    for c in s:\n        d[c] += 1\n        \n    #count c in t as negative\n    for c in t:\n        d[c] -= 1\n    # initialize result\n    res = 0\n\n    # iterate all characters present in both strings\n    for key in d:\n\n        # add the difference of character count to result\n        res += abs(d[key])\n\n    return res\n")),(0,i.kt)(o.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    int minSteps(string s, string t) {\n        int ans = 0;\n        unordered_map<int, int> m;\n        for (auto x : s) m[x - 'a']++;\n        for (auto x : t) m[x - 'a']--;\n        for (int i = 0; i < 26; i++) ans += abs(m[i]);\n        return ans;\n    }\n};\n")))}h.isMDXComponent=!0},8539:function(e,t,n){n.d(t,{Z:function(){return a}});var r=n(67294);function a(e){var t=e.name;return r.createElement("div",{className:"solution-author-wrapper"},r.createElement("span",null,"This solution is written by ",t))}}}]);
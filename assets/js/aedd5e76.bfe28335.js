"use strict";(self.webpackChunkleetcode_the_hard_way=self.webpackChunkleetcode_the_hard_way||[]).push([[3004],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=o,f=c["".concat(u,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=c;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},44340:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return c}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),l=n(8539),i=["components"],u={description:"Author: @wingkwong | https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/"},s="2265 - Count Nodes Equal to Average of Subtree (Medium)",p={unversionedId:"2200-2299/count-nodes-equal-to-average-of-subtree-medium",id:"2200-2299/count-nodes-equal-to-average-of-subtree-medium",title:"2265 - Count Nodes Equal to Average of Subtree (Medium)",description:"Author: @wingkwong | https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/",source:"@site/solutions/2200-2299/2265-count-nodes-equal-to-average-of-subtree-medium.md",sourceDirName:"2200-2299",slug:"/2200-2299/count-nodes-equal-to-average-of-subtree-medium",permalink:"/leetcode-the-hard-way/solutions/2200-2299/count-nodes-equal-to-average-of-subtree-medium",draft:!1,editUrl:"https://github.com/wingkwong/leetcode-the-hard-way/solutions/2200-2299/2265-count-nodes-equal-to-average-of-subtree-medium.md",tags:[],version:"current",sidebarPosition:2265,frontMatter:{description:"Author: @wingkwong | https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/"},sidebar:"tutorialSidebar",previous:{title:"2264 - Largest 3-Same-Digit Number in String (Easy)",permalink:"/leetcode-the-hard-way/solutions/2200-2299/largest-3-same-digit-number-in-string-easy"},next:{title:"2266 - Count Number of Texts (Medium)",permalink:"/leetcode-the-hard-way/solutions/2200-2299/count-number-of-texts-medium"}},d={},c=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: Post Order Traversal",id:"approach-1-post-order-traversal",level:2}],m={toc:c};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"2265---count-nodes-equal-to-average-of-subtree-medium"},"2265 - Count Nodes Equal to Average of Subtree (Medium)"),(0,a.kt)("h2",{id:"problem-link"},"Problem Link"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/"},"https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/")),(0,a.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,a.kt)("p",null,"Given the ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," of a binary tree, return ",(0,a.kt)("em",{parentName:"p"},"the number of nodes where the value of the node is equal to the ",(0,a.kt)("strong",{parentName:"em"},"average")," of the values in its ",(0,a.kt)("strong",{parentName:"em"},"subtree")),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("strong",{parentName:"li"},"average")," of ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," elements is the ",(0,a.kt)("strong",{parentName:"li"},"sum")," of the ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," elements divided by ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," and ",(0,a.kt)("strong",{parentName:"li"},"rounded down")," to the nearest integer."),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("strong",{parentName:"li"},"subtree")," of ",(0,a.kt)("inlineCode",{parentName:"li"},"root")," is a tree consisting of ",(0,a.kt)("inlineCode",{parentName:"li"},"root")," and all of its descendants.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/15/image-20220315203925-1.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [4,8,5,0,1,null,6]\nOutput: 5\nExplanation: \nFor the node with value 4: The average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4.\nFor the node with value 5: The average of its subtree is (5 + 6) / 2 = 11 / 2 = 5.\nFor the node with value 0: The average of its subtree is 0 / 1 = 0.\nFor the node with value 1: The average of its subtree is 1 / 1 = 1.\nFor the node with value 6: The average of its subtree is 6 / 1 = 6.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2022/03/26/image-20220326133920-1.png",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [1]\nOutput: 1\nExplanation: For the node with value 1: The average of its subtree is 1 / 1 = 1.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ",(0,a.kt)("inlineCode",{parentName:"li"},"[1, 1000]"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"0 <= Node.val <= 1000"))),(0,a.kt)("h2",{id:"approach-1-post-order-traversal"},"Approach 1: Post Order Traversal"),(0,a.kt)(l.Z,{name:"@wingkwong",mdxType:"SolutionAuthor"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int ans = 0;\n    pair<int, int> dfs(TreeNode* node) {\n        if (!node) return {0, 0}; // {sum, cnt}\n        // post order traversal\n        auto l = dfs(node->left);\n        auto r = dfs(node->right);\n        // sum from left tree + sum from right tree + current node value\n        int sum = l.first + r.first + node->val;\n        // cnt from left tree + cnt from right tree + current node value\n        int cnt = l.second + r.second + 1;\n        // check if the avgerage is same as the node value\n        ans += (sum / cnt == node->val);\n        // return the pair\n        return {sum, cnt};\n    }\n    \n    int averageOfSubtree(TreeNode* root) {\n        dfs(root);\n        return ans;\n    }\n};\n")))}f.isMDXComponent=!0},8539:function(e,t,n){n.d(t,{Z:function(){return o}});var r=n(67294);function o(e){var t=e.name;return r.createElement("div",{className:"solution-author-wrapper"},r.createElement("span",null,"This solution is written by ",t))}}}]);